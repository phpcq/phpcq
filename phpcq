#!/usr/bin/env php
<?php

use Phpcq\Command\ExecCommand;
use Phpcq\Command\PlatformInformationCommand;
use Phpcq\Command\RunCommand;
use Phpcq\Command\UpdateCommand;
use Phpcq\Command\ValidateCommand;
use Symfony\Component\Console\Application;
use Symfony\Component\Console\Input\ArgvInput;

error_reporting(E_ALL & ~ E_USER_DEPRECATED);

function includeIfExists($file)
{
    return file_exists($file) ? include $file : false;
}
if ((!$loader = includeIfExists(__DIR__.'/vendor/autoload.php')) && (!$loader = includeIfExists(__DIR__.'/../../autoload.php'))) {
    echo 'You must set up the project dependencies, run the following commands:'.PHP_EOL.
        'curl -sS https://getcomposer.org/installer | php'.PHP_EOL.
        'php composer.phar install'.PHP_EOL;
    exit(1);
}

$application = new Application();

$application->addCommands([
    new RunCommand(),
    new UpdateCommand(),
    new ValidateCommand(),
    new PlatformInformationCommand(),
    new ExecCommand()
]);

$argv = $_SERVER['argv'];
$input = new ArgvInput($argv);
if ($input->getFirstArgument() === 'exec') {
    $application->setDefaultCommand('exec', true);
    // strip the application name.
    array_shift($argv);
    // If no '--' is to be found in the args (used to separate options for phpcq from the args and options for the tool,
    // insert it just before the tool name.
    if (false === array_search('--', $argv)) {
        $argPos = array_search('exec', $argv);
        $tempInput = new ArgvInput(array_slice($argv, $argPos + 1));
        if (null !== $toolName = $tempInput->getFirstArgument()) {
            $toolPos = array_search($toolName, $argv);
            $argv = array_merge(
                array_slice($argv, 0, $argPos),
                array_slice($argv, $argPos + 1, $toolPos - ($argPos + 1)),
                ['--'],
                array_slice($argv, $toolPos)
            );
        }
    }
    $input = new ArgvInput($argv);
}

$application->setAutoExit(true);
$application->run($input);
