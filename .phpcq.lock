{"bootstraps":{"bootstrap-0":{"plugin-version":"1.0.0","type":"inline","code":"<?php\n\nuse Phpcq\\PluginApi\\Version10\\BuildConfigInterface;\nuse Phpcq\\PluginApi\\Version10\\ConfigurationOptionsBuilderInterface;\nuse Phpcq\\PluginApi\\Version10\\ConfigurationPluginInterface;\n\nreturn new class implements ConfigurationPluginInterface {\n    public function getName(): string\n    {\n        return 'phpunit';\n    }\n\n    public function describeOptions(ConfigurationOptionsBuilderInterface $configOptionsBuilder): void\n    {\n        $configOptionsBuilder->describeStringOption(\n            'custom_flags',\n            'Any custom flags to pass to phpunit. For valid flags refer to the phpunit documentation.',\n        );\n    }\n\n    public function processConfig(array $config, BuildConfigInterface $buildConfig): iterable\n    {\n        $args = [];\n        if ('' !== ($values = $config['custom_flags'] ?? '')) {\n            $args[] = $values;\n        }\n\n        yield $buildConfig\n            ->getTaskFactory()\n            ->buildRunPhar('phpunit', $args)\n            ->withWorkingDirectory($buildConfig->getProjectConfiguration()->getProjectRootPath())\n            ->build();\n    }\n};\n"},"bootstrap-1":{"plugin-version":"1.0.0","type":"inline","code":"<?php\n\nuse Phpcq\\PluginApi\\Version10\\BuildConfigInterface;\nuse Phpcq\\PluginApi\\Version10\\ConfigurationOptionsBuilderInterface;\nuse Phpcq\\PluginApi\\Version10\\ConfigurationPluginInterface;\n\nreturn new class implements ConfigurationPluginInterface {\n    public function getName(): string\n    {\n        return 'psalm';\n    }\n\n    public function describeOptions(ConfigurationOptionsBuilderInterface $configOptionsBuilder): void\n    {\n        $configOptionsBuilder\n            ->describeBoolOption('debug', 'Show debug information.')\n            ->describeBoolOption('debug_by_line', 'Debug information on a line-by-line level')\n            ->describeBoolOption('shepherd', 'Send data to Shepherd, Psalm\\'s GitHub integration tool.')\n            ->describeStringOption('shepherd_host', 'Override shepherd host');\n\n        $configOptionsBuilder->describeStringOption(\n            'custom_flags',\n            'Any custom flags to pass to phpunit. For valid flags refer to the phpunit documentation.',\n        );\n    }\n\n    public function processConfig(array $config, BuildConfigInterface $buildConfig): iterable\n    {\n        yield $buildConfig\n            ->getTaskFactory()\n            ->buildRunPhar('psalm', $this->buildArguments($config))\n            ->withWorkingDirectory($buildConfig->getProjectConfiguration()->getProjectRootPath())\n            ->build();\n    }\n\n    private function buildArguments(array $config): array\n    {\n        $arguments = [];\n\n        foreach (['debug', 'debug_by_line'] as $flag) {\n            if (isset($config[$flag])) {\n                $arguments[] = '--' .  str_replace('_', '-', $flag);\n            }\n        }\n\n        if (isset($config['shepherd'])) {\n            if (isset($config['shepherd_host'])) {\n                $arguments[] = '--shepherd=' . $config['shepherd_host'];\n            } else {\n                $arguments[] = '--shepherd';\n            }\n        }\n\n        if ('' !== ($values = $config['custom_flags'] ?? '')) {\n            $arguments[] = $values;\n        }\n\n        return $arguments;\n    }\n};\n"},"bootstrap-2":{"plugin-version":"1.0.0","type":"inline","code":"<?php\n\nuse Phpcq\\PluginApi\\Version10\\BuildConfigInterface;\nuse Phpcq\\PluginApi\\Version10\\ConfigurationOptionsBuilderInterface;\nuse Phpcq\\PluginApi\\Version10\\ConfigurationPluginInterface;\n\nreturn new class implements ConfigurationPluginInterface {\n    public function getName(): string\n    {\n        return 'composer-require-checker';\n    }\n\n    public function describeOptions(ConfigurationOptionsBuilderInterface $configOptionsBuilder): void\n    {\n        $configOptionsBuilder\n            ->describeStringOption('config_file', 'Path to configuration file')\n            ->describeStringOption('composer_file', 'Path to the composer.json', 'composer.json');\n\n        $configOptionsBuilder->describeStringOption(\n            'custom_flags',\n            'Any custom flags to pass to composer-require-checker. ' .\n            'For valid flags refer to the composer-require-checker documentation.',\n        );\n    }\n\n    public function processConfig(array $config, BuildConfigInterface $buildConfig): iterable\n    {\n        yield $buildConfig\n            ->getTaskFactory()\n            ->buildRunPhar('composer-require-checker', $this->buildArguments($config, $buildConfig))\n            ->withWorkingDirectory($buildConfig->getProjectConfiguration()->getProjectRootPath())\n            ->build();\n    }\n\n    private function buildArguments(array $config, BuildConfigInterface $buildConfig): array\n    {\n        $arguments = ['check'];\n\n        $projectRoot = $buildConfig->getProjectConfiguration()->getProjectRootPath() . '\/';\n        if (isset($config['config_file'])) {\n            $arguments[] = '--config-file=' . $projectRoot . $config['config_file'];\n        }\n\n        if (isset($config['composer_file'])) {\n            $arguments[] = $projectRoot . $config['composer_file'];\n        }\n\n        return $arguments;\n    }\n};\n"},"bootstrap-3":{"plugin-version":"1.0.0","type":"inline","code":"<?php\n\n\/**\n * Tool home: https:\/\/github.com\/phpmd\/phpmd\n *\/\n\nuse Phpcq\\PluginApi\\Version10\\BuildConfigInterface;\nuse Phpcq\\PluginApi\\Version10\\ConfigurationOptionsBuilderInterface;\nuse Phpcq\\PluginApi\\Version10\\ConfigurationPluginInterface;\n\nreturn new class implements ConfigurationPluginInterface {\n    public function getName(): string\n    {\n        return 'phpmd';\n    }\n\n    public function describeOptions(ConfigurationOptionsBuilderInterface $configOptionsBuilder): void\n    {\n        $configOptionsBuilder->describeStringOption(\n            'format',\n            'Output format to use (ansi, html, json, text, xml).',\n            'text'\n        );\n\n        $configOptionsBuilder->describeArrayOption(\n            'ruleset',\n            'List of rulesets (cleancode, codesize, controversial, design, naming, unusedcode).',\n            [\n                'naming',\n                'unusedcode'\n            ]\n        );\n\n        $configOptionsBuilder->describeStringOption(\n            'custom_flags',\n            'Any custom flags to pass to phpmd.'\n        );\n\n        $configOptionsBuilder->describeArrayOption(\n            'directories',\n            'Source directories to be analyzed with phpmd.'\n        );\n    }\n\n\n    public function processConfig(array $config, BuildConfigInterface $buildConfig): iterable\n    {\n        [$should, $excluded] = $this->processDirectories($config['directories']);\n\n        $flags = [\n            'format' => 'text',\n            'ruleset' => 'naming,unusedcode',\n        ];\n\n        foreach ($flags as $key => $value) {\n            if ('' !== ($value = $this->commaValues($config, $key))) {\n                $flags[$key] = $value;\n            }\n        }\n\n        $args = [\n            implode(',', $should),\n            $flags['format'],\n            $flags['ruleset'],\n        ];\n\n        if ([] !== $excluded) {\n            $exclude = [];\n            foreach ($excluded as $path) {\n                if ('' === ($path = trim($path))) {\n                    continue;\n                }\n                $exclude[] = $path;\n            }\n            $args[] = '--exclude=' . implode(',', $exclude);\n        }\n        if ('' !== ($values = $config['custom_flags'] ?? '')) {\n            $args[] = $values;\n        }\n\n        yield $buildConfig\n            ->getTaskFactory()\n            ->buildRunPhar('phpmd', $args)\n            ->withWorkingDirectory($buildConfig->getProjectConfiguration()->getProjectRootPath())\n            ->build();\n    }\n\n    \/**\n     * Process the directory list.\n     *\n     * @param array $directories The directory list.\n     *\n     * @return array\n     *\/\n    private function processDirectories(array $directories): array\n    {\n        $should  = [];\n        $exclude = [];\n        foreach ($directories as $directory => $dirConfig) {\n            $should[] = $directory;\n            if (null !== $dirConfig) {\n                if (isset($dirConfig['excluded'])) {\n                    foreach ($dirConfig['excluded'] as $excl) {\n                        $exclude[] = $directory . '\/' . $excl;\n                    }\n                }\n            }\n        }\n        return [$should, $exclude];\n    }\n\n    private function commaValues(array $config, string $key): string\n    {\n        if (!isset($config[$key])) {\n            return '';\n        }\n        return implode(',', (array) $config[$key]);\n    }\n};\n"},"bootstrap-4":{"plugin-version":"1.0.0","type":"inline","code":"<?php\n\n\/**\n * Tool home: https:\/\/github.com\/sebastianbergmann\/phpcpd\n *\/\n\nuse Phpcq\\PluginApi\\Version10\\BuildConfigInterface;\nuse Phpcq\\PluginApi\\Version10\\ConfigurationOptionsBuilderInterface;\nuse Phpcq\\PluginApi\\Version10\\ConfigurationPluginInterface;\n\nreturn new class implements ConfigurationPluginInterface {\n    public function getName(): string\n    {\n        return 'phpcpd';\n    }\n\n    public function describeOptions(ConfigurationOptionsBuilderInterface $configOptionsBuilder): void\n    {\n        $configOptionsBuilder->describeArrayOption(\n            'names',\n            'A list of file names to check.',\n            ['*.php']\n        );\n\n        $configOptionsBuilder->describeArrayOption(\n            'names_exclude',\n            'A list of file names to exclude.'\n        );\n\n        $configOptionsBuilder->describeArrayOption(\n            'regexps_exclude',\n            'A list of paths regexps to exclude (example: \"#var\/.*_tmp#\")'\n        );\n\n        $configOptionsBuilder->describeStringOption(\n            'log',\n            'Write result in PMD-CPD XML format to file'\n        );\n\n        $configOptionsBuilder->describeIntOption(\n            'min_lines',\n            'Minimum number of identical lines.',\n            5\n        );\n\n        $configOptionsBuilder->describeIntOption(\n            'min_tokens',\n            'Minimum number of identical tokens.',\n            70\n        );\n\n        $configOptionsBuilder->describeBoolOption(\n            'fuzzy',\n            'Fuzz variable names',\n            false\n        );\n\n        $configOptionsBuilder->describeStringOption(\n            'custom_flags',\n            'Any custom flags to pass to phpcpd. For valid flags refer to the phpcpd documentation.'\n        );\n\n        $configOptionsBuilder->describeArrayOption(\n            'directories',\n            'Source directories to be analyzed with phpcpd.'\n        );\n    }\n\n    public function processConfig(array $config, BuildConfigInterface $buildConfig): iterable\n    {\n        [$should, $excluded] = $this->processDirectories($config['directories']);\n        $args = [];\n        if ([] !== $excluded) {\n            foreach ($excluded as $path) {\n                if ('' === ($path = trim($path))) {\n                    continue;\n                }\n                $args[] = '--exclude=' . $path;\n            }\n        }\n        if ('' !== ($values = $this->commaValues($config, 'names'))) {\n            $args[] = '--names=' . $values;\n        }\n        if ('' !== ($values = $this->commaValues($config, 'names_exclude'))) {\n            $args[] = '--names-exclude=' . $values;\n        }\n        if ('' !== ($values = $this->commaValues($config, 'regexps_exclude'))) {\n            $args[] = '--regexps-exclude=' . $values;\n        }\n        if ('' !== ($values = $config['log'] ?? '')) {\n            $args[] = '--log-pmd=' . $values;\n        }\n        if ('' !== ($values = $config['min_lines'] ?? '')) {\n            $args[] = '--min-lines=' . $values;\n        }\n        if ('' !== ($values = $config['min_tokens'] ?? '')) {\n            $args[] = '--min-tokens=' . $values;\n        }\n        if ($config['fuzzy'] ?? false) {\n            $args[] = '--fuzzy';\n        }\n        if ('' !== ($values = $config['custom_flags'] ?? '')) {\n            $args[] = 'custom_flags';\n        }\n\n        yield $buildConfig\n            ->getTaskFactory()\n            ->buildRunPhar('phpcpd', array_merge($args, $should))\n            ->withWorkingDirectory($buildConfig->getProjectConfiguration()->getProjectRootPath())\n            ->build();\n    }\n\n    \/**\n     * Process the directory list.\n     *\n     * @param array $directories The directory list.\n     *\n     * @return array\n     *\/\n    private function processDirectories(array $directories): array\n    {\n        $should  = [];\n        $exclude = [];\n        foreach ($directories as $directory => $dirConfig) {\n            $should[] = $directory;\n            if (null !== $dirConfig) {\n                if (isset($dirConfig['excluded'])) {\n                    foreach ($dirConfig['excluded'] as $excl) {\n                        $exclude[] = $directory . '\/' . $excl;\n                    }\n                }\n            }\n        }\n        return [$should, $exclude];\n    }\n\n    private function commaValues(array $config, string $key): string\n    {\n        if (!isset($config[$key])) {\n            return '';\n        }\n        return implode(',', (array) $config[$key]);\n    }\n};\n"},"bootstrap-5":{"plugin-version":"1.0.0","type":"inline","code":"<?php\n\n\/**\n * Tool home: https:\/\/github.com\/sebastianbergmann\/phploc\n *\/\n\nuse Phpcq\\PluginApi\\Version10\\BuildConfigInterface;\nuse Phpcq\\PluginApi\\Version10\\ConfigurationOptionsBuilderInterface;\nuse Phpcq\\PluginApi\\Version10\\ConfigurationPluginInterface;\n\nreturn new class implements ConfigurationPluginInterface {\n    public function getName(): string\n    {\n        return 'phploc';\n    }\n\n    public function describeOptions(ConfigurationOptionsBuilderInterface $configOptionsBuilder): void\n    {\n        $configOptionsBuilder->describeArrayOption('output', 'List of outputs to use.');\n\n        $configOptionsBuilder->describeStringOption(\n            'custom_flags',\n            'Any custom flags to pass to phploc. For valid flags refer to the phploc documentation.'\n        );\n\n        $configOptionsBuilder->describeArrayOption('directories', 'Source directories to be analyzed with phploc.');\n    }\n\n    public function processConfig(array $config, BuildConfigInterface $buildConfig): iterable\n    {\n        [$should, $excluded] = $this->processDirectories($config['directories']);\n        $args = [];\n        if ([] !== $excluded) {\n            foreach ($excluded as $path) {\n                if ('' === ($path = trim($path))) {\n                    continue;\n                }\n                $args[] = '--exclude=' . $path;\n            }\n        }\n        if ('' !== ($values = $config['custom_flags'] ?? '')) {\n            $args[] = 'custom_flags';\n        }\n\n        yield $buildConfig\n            ->getTaskFactory()\n            ->buildRunPhar('phploc', array_merge($args, $should))\n            ->withWorkingDirectory($buildConfig->getProjectConfiguration()->getProjectRootPath())\n            ->build();\n    }\n\n    \/**\n     * Process the directory list.\n     *\n     * @param array $directories The directory list.\n     *\n     * @return array\n     *\/\n    private function processDirectories(array $directories): array\n    {\n        $should  = [];\n        $exclude = [];\n        foreach ($directories as $directory => $dirConfig) {\n            $should[] = $directory;\n            if (null !== $dirConfig) {\n                if (isset($dirConfig['excluded'])) {\n                    foreach ($dirConfig['excluded'] as $excl) {\n                        $exclude[] = $directory . '\/' . $excl;\n                    }\n                }\n            }\n        }\n        return [$should, $exclude];\n    }\n\n    private function commaValues(array $config, string $key): string\n    {\n        if (!isset($config[$key])) {\n            return '';\n        }\n        return implode(',', (array) $config[$key]);\n    }\n};\n"},"bootstrap-6":{"plugin-version":"1.0.0","type":"inline","code":"<?php\n\nuse Phpcq\\PluginApi\\Version10\\BuildConfigInterface;\nuse Phpcq\\PluginApi\\Version10\\ConfigurationOptionsBuilderInterface;\nuse Phpcq\\PluginApi\\Version10\\ConfigurationPluginInterface;\n\nreturn new class implements ConfigurationPluginInterface {\n    public function getName(): string\n    {\n        return 'phpcs';\n    }\n\n    public function describeOptions(ConfigurationOptionsBuilderInterface $configOptionsBuilder): void\n    {\n        $configOptionsBuilder\n            ->describeArrayOption('directories', 'The source directories to be analyzed with phpcs.')\n            ->describeStringOption('standard', 'The default coding standard style')\n            ->describeArrayOption('excluded', 'The excluded files and folders.', [])\n        ;\n\n        $configOptionsBuilder->describeStringOption(\n            'custom_flags',\n            'Any custom flags to pass to phpcs. For valid flags refer to the cphpcs documentation.',\n        );\n    }\n\n    public function processConfig(array $config, BuildConfigInterface $buildConfig): iterable\n    {\n        foreach ($config['directories'] as $directory => $directoryConfig) {\n            yield $buildConfig\n                ->getTaskFactory()\n                ->buildRunPhar('phpcs', $this->buildArguments($directory, $directoryConfig ?: $config, $buildConfig))\n                ->withWorkingDirectory($buildConfig->getProjectConfiguration()->getProjectRootPath())\n                ->build();\n        }\n    }\n\n    private function buildArguments(string $directory, array $config, BuildConfigInterface $buildConfig): array\n    {\n        $arguments = [];\n\n        if (isset($config['standard'])) {\n            $arguments[] = '--standard=' . $config['standard'];\n        }\n\n        if (isset($config['excluded'])) {\n            $arguments[] = '--exclude=' . implode(',', $config['excluded']);\n        }\n\n        if (isset($config['custom_flags'])) {\n            $arguments[] = $config['custom_flags'];\n        }\n\n        $arguments[] = $directory;\n\n        return $arguments;\n    }\n};\n"},"bootstrap-7":{"plugin-version":"1.0.0","type":"inline","code":"<?php\n\nuse Phpcq\\PluginApi\\Version10\\BuildConfigInterface;\nuse Phpcq\\PluginApi\\Version10\\ConfigurationOptionsBuilderInterface;\nuse Phpcq\\PluginApi\\Version10\\ConfigurationPluginInterface;\n\nreturn new class implements ConfigurationPluginInterface {\n    public function getName(): string\n    {\n        return 'phpcbf';\n    }\n\n    public function describeOptions(ConfigurationOptionsBuilderInterface $configOptionsBuilder): void\n    {\n        $configOptionsBuilder\n            ->describeArrayOption('directories', 'The source directories to be fixed with phpcbf.')\n            ->describeStringOption('standard', 'The default code style', 'PSR12')\n            ->describeArrayOption('excluded', 'The excluded files and folders.', [])\n        ;\n\n        $configOptionsBuilder->describeStringOption(\n            'custom_flags',\n            'Any custom flags to pass to phpcbf. For valid flags refer to the cphpcs documentation.',\n        );\n    }\n\n    public function processConfig(array $config, BuildConfigInterface $buildConfig): iterable\n    {\n        foreach ($config['directories'] as $directory => $directoryConfig) {\n            yield $buildConfig\n                ->getTaskFactory()\n                ->buildRunPhar('phpcbf', $this->buildArguments($directory, $directoryConfig ?: $config, $buildConfig))\n                ->withWorkingDirectory($buildConfig->getProjectConfiguration()->getProjectRootPath())\n                ->build();\n        }\n    }\n\n    private function buildArguments(string $directory, array $config, BuildConfigInterface $buildConfig): array\n    {\n        $arguments = [];\n\n        if (isset($config['standard'])) {\n            $arguments[] = '--standard=' . $config['standard'];\n        }\n\n        if (isset($config['excluded'])) {\n            $arguments[] = '--exclude=' . implode(',', $config['excluded']);\n        }\n\n        if (isset($config['custom_flags'])) {\n            $arguments[] = $config['custom_flags'];\n        }\n\n        $arguments[] = $directory;\n\n        return $arguments;\n    }\n};\n"},"bootstrap-8":{"plugin-version":"1.0.0","type":"inline","code":"<?php\n\nuse Phpcq\\PluginApi\\Version10\\BuildConfigInterface;\nuse Phpcq\\PluginApi\\Version10\\ConfigurationOptionsBuilderInterface;\nuse Phpcq\\PluginApi\\Version10\\ConfigurationPluginInterface;\n\nreturn new class implements ConfigurationPluginInterface {\n    public function getName(): string\n    {\n        return 'composer-normalize';\n    }\n\n    public function describeOptions(ConfigurationOptionsBuilderInterface $configOptionsBuilder): void\n    {\n        $configOptionsBuilder\n            ->describeBoolOption('dry_run', 'Show the results of normalizing, but do not modify any files', true)\n            ->describeStringOption('file', 'Path to composer.json file relative to project root')\n            ->describeIntOption(\n                'indent_size',\n                'Indent size (an integer greater than 0); should be used with the indent_style option',\n                2\n            )\n            ->describeStringOption(\n                'indent_style',\n                'Indent style (one of \"space\", \"tab\"); should be used with the indent_size option',\n                'space'\n            )\n            ->describeStringOption('no_update_lock', 'Path to the composer.json', 'composer.json');\n    }\n\n    public function processConfig(array $config, BuildConfigInterface $buildConfig): iterable\n    {\n        yield $buildConfig\n            ->getTaskFactory()\n            ->buildRunPhar('composer-normalize', $this->buildArguments($config, $buildConfig))\n            ->withWorkingDirectory($buildConfig->getProjectConfiguration()->getProjectRootPath())\n            ->build();\n    }\n\n    private function buildArguments(array $config, BuildConfigInterface $buildConfig): array\n    {\n        $arguments = [];\n\n        if (isset($config['file'])) {\n            $arguments[] = $config['file'];\n        }\n\n        if (!isset($config['dry_run']) || $config['dry_run']) {\n            $arguments[] = '--dry-run';\n        }\n\n        if (isset($config['indent_size'])) {\n            $arguments[] = '--indent-size';\n            $arguments[] = $config['indent_size'];\n        }\n\n        if (isset($config['indent_style'])) {\n            $arguments[] = '--indent-style';\n            $arguments[] = $config['indent_style'];\n        }\n\n        if (isset($config['no_update_lock'])) {\n            $arguments[] = '--no-update-lock';\n        }\n\n        return $arguments;\n    }\n};\n"}},"phars":{"phpunit":[{"version":"9.1.5","phar-url":"https:\/\/phar.phpunit.de\/phpunit-9.1.5.phar","bootstrap":"bootstrap-0","requirements":{"php":"^7.3","ext-dom":"*","ext-json":"*","ext-libxml":"*","ext-mbstring":"*","ext-xml":"*","ext-xmlwriter":"*"},"signature":"https:\/\/phar.phpunit.de\/phpunit-9.1.5.phar.asc"}],"psalm":[{"version":"3.11.5","phar-url":"https:\/\/github.com\/vimeo\/psalm\/releases\/download\/3.11.5\/psalm.phar","bootstrap":"bootstrap-1","requirements":{"php":"^7.1.3|^8","ext-SimpleXML":"*","ext-dom":"*","ext-json":"*","ext-libxml":"*","ext-tokenizer":"*"},"signature":"https:\/\/github.com\/vimeo\/psalm\/releases\/download\/3.11.5\/psalm.phar.asc"}],"composer-require-checker":[{"version":"2.1.0","phar-url":"https:\/\/github.com\/maglnet\/ComposerRequireChecker\/releases\/download\/2.1.0\/composer-require-checker.phar","bootstrap":"bootstrap-2","requirements":{"php":"^7.2","ext-json":"*","ext-phar":"*"},"signature":"https:\/\/github.com\/maglnet\/ComposerRequireChecker\/releases\/download\/2.1.0\/composer-require-checker.phar.asc"}],"phpmd":[{"version":"2.8.2","phar-url":"https:\/\/github.com\/phpmd\/phpmd\/releases\/download\/2.8.2\/phpmd.phar","bootstrap":"bootstrap-3","requirements":{"php":">=5.3.9","ext-xml":"*"},"signature":null}],"phpcpd":[{"version":"5.0.2","phar-url":"https:\/\/phar.phpunit.de\/phpcpd-5.0.2.phar","bootstrap":"bootstrap-4","requirements":{"php":"^7.3","ext-dom":"*"},"signature":"https:\/\/phar.phpunit.de\/phpcpd-5.0.2.phar.asc"}],"phploc":[{"version":"6.0.2","phar-url":"https:\/\/phar.phpunit.de\/phploc-6.0.2.phar","bootstrap":"bootstrap-5","requirements":{"php":"^7.3","ext-dom":"*","ext-json":"*"},"signature":"https:\/\/phar.phpunit.de\/phploc-6.0.2.phar.asc"}],"phpcs":[{"version":"3.5.5","phar-url":"https:\/\/github.com\/squizlabs\/PHP_CodeSniffer\/releases\/download\/3.5.5\/phpcs.phar","bootstrap":"bootstrap-6","requirements":{"php":">=5.4.0","ext-tokenizer":"*","ext-xmlwriter":"*","ext-simplexml":"*"},"signature":"https:\/\/github.com\/squizlabs\/PHP_CodeSniffer\/releases\/download\/3.5.5\/phpcs.phar.asc"}],"phpcbf":[{"version":"3.5.5","phar-url":"https:\/\/github.com\/squizlabs\/PHP_CodeSniffer\/releases\/download\/3.5.5\/phpcbf.phar","bootstrap":"bootstrap-7","requirements":{"php":">=5.4.0","ext-tokenizer":"*","ext-xmlwriter":"*","ext-simplexml":"*"},"signature":"https:\/\/github.com\/squizlabs\/PHP_CodeSniffer\/releases\/download\/3.5.5\/phpcbf.phar.asc"}],"composer-normalize":[{"version":"2.5.1","phar-url":"https:\/\/github.com\/ergebnis\/composer-normalize\/releases\/download\/2.5.1\/composer-normalize.phar","bootstrap":"bootstrap-8","requirements":{"php":"^7.1"},"signature":"https:\/\/github.com\/ergebnis\/composer-normalize\/releases\/download\/2.5.1\/composer-normalize.phar.asc"}]}}