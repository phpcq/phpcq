{"bootstraps":{"bootstrap-0":{"plugin-version":"1.0.0","type":"inline","code":"<?php\n\nuse Phpcq\\PluginApi\\Version10\\Configuration\\PluginConfigurationBuilderInterface;\nuse Phpcq\\PluginApi\\Version10\\Configuration\\PluginConfigurationInterface;\nuse Phpcq\\PluginApi\\Version10\\DiagnosticsPluginInterface;\nuse Phpcq\\PluginApi\\Version10\\EnvironmentInterface;\nuse Phpcq\\PluginApi\\Version10\\Output\\OutputTransformerFactoryInterface;\nuse Phpcq\\PluginApi\\Version10\\Output\\OutputTransformerInterface;\nuse Phpcq\\PluginApi\\Version10\\Report\\ToolReportInterface;\nuse Phpcq\\PluginApi\\Version10\\Util\\JUnitReportAppender;\n\nreturn new class implements DiagnosticsPluginInterface {\n    public function getName(): string\n    {\n        return 'phpunit';\n    }\n\n    public function describeConfiguration(PluginConfigurationBuilderInterface $configOptionsBuilder): void\n    {\n        $configOptionsBuilder\n            ->describeStringListOption(\n                'custom_flags',\n                'Any custom flags to pass to phpunit. For valid flags refer to the phpunit documentation.'\n            )\n            ->withDefaultValue([])\n            ->isRequired();\n    }\n\n    public function createDiagnosticTasks(\n        PluginConfigurationInterface $config,\n        EnvironmentInterface $buildConfig\n    ): iterable {\n        $args = [\n            '--log-junit',\n            $logFile = $buildConfig->getUniqueTempFile($this, 'junit-log.xml')\n        ];\n\n        if ($config->has('custom_flags')) {\n            foreach ($config->getStringList('custom_flags') as $value) {\n                $args[] = $value;\n            }\n        }\n\n        $projectRoot = $buildConfig->getProjectConfiguration()->getProjectRootPath();\n        yield $buildConfig\n            ->getTaskFactory()\n            ->buildRunPhar('phpunit', $args)\n            ->withWorkingDirectory($projectRoot)\n            ->withOutputTransformer($this->createOutputTransformerFactory($logFile, $projectRoot))\n            ->build();\n    }\n\n    private function createOutputTransformerFactory(\n        string $logFile,\n        string $rootDir\n    ): OutputTransformerFactoryInterface {\n        return new class ($logFile, $rootDir) implements OutputTransformerFactoryInterface {\n            private $logFile;\n            private $rootDir;\n\n            public function __construct(string $logFile, string $rootDir)\n            {\n                $this->logFile = $logFile;\n                $this->rootDir = $rootDir;\n            }\n\n            public function createFor(ToolReportInterface $report): OutputTransformerInterface\n            {\n                return new class ($this->logFile, $this->rootDir, $report) implements OutputTransformerInterface {\n                    \/** @var string *\/\n                    private $logFile;\n                    \/** @var string *\/\n                    private $rootDir;\n                    \/** @var ToolReportInterface *\/\n                    private $report;\n\n                    public function __construct(string $logFile, string $rootDir, ToolReportInterface $report)\n                    {\n                        $this->logFile = $logFile;\n                        $this->rootDir = $rootDir;\n                        $this->report  = $report;\n                    }\n\n                    public function write(string $data, int $channel): void\n                    {\n                        \/\/ FIXME: do we also want to parse stdout\/stderr?\n                    }\n\n                    public function finish(int $exitCode): void\n                    {\n                        $this->report->addAttachment('junit-log.xml')->fromFile($this->logFile)->end();\n                        JUnitReportAppender::appendFileTo($this->report, $this->logFile, $this->rootDir);\n                        $this->report->close(\n                            $exitCode === 0 ? ToolReportInterface::STATUS_PASSED : ToolReportInterface::STATUS_FAILED\n                        );\n                    }\n                };\n            }\n        };\n    }\n};\n","hash":{"type":"sha-512","value":"b3b6a8f970f0cade80841e37c35981545ff559c22ada4d4882248e7d69926dec4d450e4ceaa0d0687e8d409a26a72458d87b62741b1285b77ea857aaa812b677"}},"bootstrap-1":{"plugin-version":"1.0.0","type":"inline","code":"<?php\n\nuse Phpcq\\PluginApi\\Version10\\Configuration\\PluginConfigurationBuilderInterface;\nuse Phpcq\\PluginApi\\Version10\\Configuration\\PluginConfigurationInterface;\nuse Phpcq\\PluginApi\\Version10\\DiagnosticsPluginInterface;\nuse Phpcq\\PluginApi\\Version10\\EnvironmentInterface;\nuse Phpcq\\PluginApi\\Version10\\Util\\CheckstyleReportAppender;\n\nreturn new class implements DiagnosticsPluginInterface {\n    public function getName(): string\n    {\n        return 'psalm';\n    }\n\n    public function describeConfiguration(PluginConfigurationBuilderInterface $configOptionsBuilder): void\n    {\n        $configOptionsBuilder\n            ->describeBoolOption('debug', 'Show debug information.')\n            ->isRequired()\n            ->withDefaultValue(false);\n        $configOptionsBuilder\n            ->describeBoolOption('debug_by_line', 'Debug information on a line-by-line level')\n            ->isRequired()\n            ->withDefaultValue(false);\n        $configOptionsBuilder\n            ->describeBoolOption('shepherd', 'Send data to Shepherd, Psalm\\'s GitHub integration tool.')\n            ->isRequired()\n            ->withDefaultValue(false);\n        $configOptionsBuilder\n            ->describeStringOption('shepherd_host', 'Override shepherd host');\n\n        $configOptionsBuilder\n            ->describeStringListOption(\n                'custom_flags',\n                'Any custom flags to pass to psalm. For valid flags refer to the psalm documentation.'\n            )\n            ->withDefaultValue([])\n            ->isRequired();\n    }\n\n    public function createDiagnosticTasks(\n        PluginConfigurationInterface $config,\n        EnvironmentInterface $environment\n    ): iterable {\n        $projectRoot = $environment->getProjectConfiguration()->getProjectRootPath();\n        $tmpfile     = $environment->getUniqueTempFile($this, 'checkstyle.xml');\n\n        yield $environment\n            ->getTaskFactory()\n            ->buildRunPhar('psalm', $this->buildArguments($config, $environment, $tmpfile))\n            ->withWorkingDirectory($projectRoot)\n            ->withOutputTransformer(CheckstyleReportAppender::transformFile($tmpfile, $projectRoot))\n            ->build();\n    }\n\n    private function buildArguments(\n        PluginConfigurationInterface $config,\n        EnvironmentInterface $environment,\n        string $tempFile\n    ): array {\n        $arguments = [];\n\n        foreach (['debug', 'debug_by_line'] as $flag) {\n            if ($config->getBool($flag)) {\n                $arguments[] = '--' .  str_replace('_', '-', $flag);\n            }\n        }\n\n        if ($config->getBool($flag)) {\n            if ($config->has('shepherd_host')) {\n                $arguments[] = '--shepherd=' . $config->getString('shepherd_host');\n            } else {\n                $arguments[] = '--shepherd';\n            }\n        }\n\n        if ($config->has('custom_flags')) {\n            foreach ($config->getStringList('custom_flags') as $value) {\n                $args[] = $value;\n            }\n        }\n\n        $arguments[] = '--threads=' . $environment->getProjectConfiguration()->getMaxCpuCores();\n        $arguments[] = '--report=' . $tempFile;\n\n        return $arguments;\n    }\n};\n","hash":{"type":"sha-512","value":"bd0b531dd459f705e4e1585961fce4d3f82f9271b92387c972b8c0ffbf3b27b41150d128b155efbca64392735477cc7ac012e55b6cadd4705dc979afd81320a8"}},"bootstrap-2":{"plugin-version":"1.0.0","type":"inline","code":"<?php\n\nuse Phpcq\\PluginApi\\Version10\\Configuration\\PluginConfigurationBuilderInterface;\nuse Phpcq\\PluginApi\\Version10\\Configuration\\PluginConfigurationInterface;\nuse Phpcq\\PluginApi\\Version10\\DiagnosticsPluginInterface;\nuse Phpcq\\PluginApi\\Version10\\EnvironmentInterface;\nuse Phpcq\\PluginApi\\Version10\\Output\\OutputTransformerFactoryInterface;\nuse Phpcq\\PluginApi\\Version10\\Output\\OutputTransformerInterface;\nuse Phpcq\\PluginApi\\Version10\\Report\\ToolReportInterface;\nuse Phpcq\\PluginApi\\Version10\\Util\\BufferedLineReader;\n\nreturn new class implements DiagnosticsPluginInterface {\n    public function getName(): string\n    {\n        return 'composer-require-checker';\n    }\n\n    public function describeConfiguration(PluginConfigurationBuilderInterface $configOptionsBuilder): void\n    {\n        $configOptionsBuilder\n            ->describeStringOption('config_file', 'Path to configuration file');\n        $configOptionsBuilder\n            ->describeStringOption('composer_file', 'Path to the composer.json (relative to project root)')\n            ->isRequired()\n            ->withDefaultValue('composer.json');\n        $configOptionsBuilder\n            ->describeStringListOption(\n                'custom_flags',\n                'Any custom flags to pass to composer-require-checker.' .\n                'For valid flags refer to the composer-require-checker documentation.',\n            )\n        ;\n    }\n\n    public function createDiagnosticTasks(\n        PluginConfigurationInterface $config,\n        EnvironmentInterface $buildConfig\n    ): iterable {\n        $composerJson = $config->getString('composer_file');\n\n        yield $buildConfig\n            ->getTaskFactory()\n            ->buildRunPhar('composer-require-checker', $this->buildArguments($config, $buildConfig))\n            ->withWorkingDirectory($buildConfig->getProjectConfiguration()->getProjectRootPath())\n            ->withOutputTransformer($this->createOutputTransformerFactory($composerJson))\n            ->build();\n    }\n\n    \/** @psalm-return array<int, string> *\/\n    private function buildArguments(PluginConfigurationInterface $config, EnvironmentInterface $buildConfig): array\n    {\n        $arguments   = ['check'];\n        $projectRoot = $buildConfig->getProjectConfiguration()->getProjectRootPath() . '\/';\n\n        if ($config->has('config_file')) {\n            $arguments[] = '--config-file=' . $projectRoot . $config->getString('config_file');\n        }\n        $arguments[] = $projectRoot . $config->getString('composer_file');\n\n        if ($config->has('custom_flags')) {\n            foreach ($config->getStringList('custom_flags') as $value) {\n                $arguments[] = (string) $value;\n            }\n        }\n\n        return $arguments;\n    }\n\n    private function createOutputTransformerFactory(string $composerFile): OutputTransformerFactoryInterface\n    {\n        return new class ($composerFile) implements OutputTransformerFactoryInterface {\n            \/** @var string *\/\n            private $composerFile;\n\n            public function __construct(string $composerFile)\n            {\n                $this->composerFile = $composerFile;\n            }\n\n            public function createFor(ToolReportInterface $report): OutputTransformerInterface\n            {\n                return new class ($this->composerFile, $report) implements OutputTransformerInterface {\n\n                    \/\/ eg. ComposerRequireChecker 2.1.0@0c66698d487fcb5c66cf07108e2180c818fb2e72\n                    private const REGEX_HEADER = '#ComposerRequireChecker [0-9]*\\.[0-9]*\\.[0-9]*#';\n\n                    private const REGEX_USAGE_SUMMARY =\n                        '#check \\[--config-file CONFIG-FILE] \\[--ignore-parse-errors] \\[--] \\[<composer-json>]#';\n\n                    \/** @var string *\/\n                    private $composerFile;\n                    \/** @var BufferedLineReader *\/\n                    private $data;\n                    \/** @var ToolReportInterface *\/\n                    private $report;\n\n                    public function __construct(string $composerFile, ToolReportInterface $report)\n                    {\n                        $this->composerFile = $composerFile;\n                        $this->report       = $report;\n                        $this->data         = BufferedLineReader::create();\n                    }\n\n                    public function write(string $data, int $channel): void\n                    {\n                        $this->data->push($data);\n                    }\n\n                    public function finish(int $exitCode): void\n                    {\n                        $this->process();\n                        $this->report->close(0 === $exitCode\n                            ? ToolReportInterface::STATUS_PASSED\n                            : ToolReportInterface::STATUS_FAILED);\n                    }\n\n                    private function logDiagnostic(string $message, string $severity): void\n                    {\n                        $this->report->addDiagnostic($severity, $message)->forFile($this->composerFile)->end()->end();\n                    }\n\n                    private function process(): void\n                    {\n                        \/\/ FIXME: this should be a state machine to parse incomplete output but for the moment it works.\n                        $unknown = [];\n                        while (null !== $line = $this->data->peek()) {\n                            if ($this->isLineIgnored($line)) {\n                                $this->data->fetch();\n                                continue;\n                            }\n\n                            \/\/ Could be notification of missing dependencies.\n                            \/\/ In LocateComposerPackageDirectDependenciesSourceFiles.php line 52:\n                            if (preg_match('#In LocateComposerPackageDirectDependenciesSourceFiles\\.php#', $line)) {\n                                $this->data->fetch();\n                                $this->processLocateComposerPackageDirectDependenciesSourceFiles();\n                                continue;\n                            }\n\n                            \/\/ Missing dependencies found, parse the table.\n                            if (preg_match('#The following unknown symbols were found:#', $line)) {\n                                $this->data->fetch();\n                                $this->processMissingSymbols();\n                                continue;\n                            }\n\n                            if (preg_match('#There were no unknown symbols found\\.#', $line)) {\n                                $this->data->fetch();\n                                $this->logDiagnostic($line, 'info');\n                                continue;\n                            }\n                            $unknown[] = $line;\n                            $this->data->fetch();\n                        }\n                        if ([] !== $unknown) {\n                            $this->logDiagnostic(\n                                'Did not understand the following output from composer-require-checker: ' .\n                                implode(\"\\n\", $unknown),\n                                'warning'\n                            );\n                            $this->report\n                                ->addAttachment('composer-require-checker.log')\n                                    ->fromString($this->data->getData())\n                                ->end();\n                        }\n                    }\n\n                    private function isLineIgnored(string $line): bool\n                    {\n                        if ('' === $line) {\n                            return true;\n                        }\n                        \/\/ If it is the version header, ignore it.\n                        if (preg_match(self::REGEX_HEADER, $line)) {\n                            return true;\n                        }\n\n                        \/\/ If it is the usage suffix, ignore it.\n                        if (preg_match(self::REGEX_USAGE_SUMMARY, $line)) {\n                            $this->data->fetch();\n                            return true;\n                        }\n\n                        return false;\n                    }\n\n                    private function processLocateComposerPackageDirectDependenciesSourceFiles(): void\n                    {\n                        \/\/ Format is:\n                        \/\/ \\n\\n<message>\\n\n                        $error = '';\n                        \/\/ Buffer up until two empty lines.\n                        while (null !== $line = $this->data->fetch()) {\n                            if (!$this->isLineIgnored($line)) {\n                                $error .= $line;\n                            }\n                        }\n                        if ('' !== $error) {\n                            $this->logDiagnostic($error, 'error');\n                        }\n                    }\n\n                    private function processMissingSymbols(): void\n                    {\n                        \/*\n                         * The following unknown symbols were found:\n                         * +----------------+--------------------+\n                         * | unknown symbol | guessed dependency |\n                         * +----------------+--------------------+\n                         * | DOMDocument    | ext-dom            |\n                         * | DOMElement     | ext-dom            |\n                         * | DOMNode        | ext-dom            |\n                         * +----------------+--------------------+\n                        *\/\n\n                        \/\/ Strip table head.\n                        foreach (\n                            [\n                                '#^\\+-*\\+-*\\+$#',\n                                '#\\|\\s*unknown symbol\\s*\\|\\s*guessed dependency\\s*\\|#',\n                                '#^\\+-*\\+-*\\+$#',\n                            ] as $regex\n                        ) {\n                            if (1 !== preg_match($regex, $line = (string) $this->data->fetch())) {\n                                throw new RuntimeException('Failed to parse line: ' . $line);\n                            }\n                        }\n                        \/\/ List missing dependencies.\n                        $dependencies = [];\n                        $unknown      = [];\n                        while (null !== $line = $this->data->fetch()) {\n                            if (preg_match('#^\\+-*\\+-*\\+$#', $line)) {\n                                \/\/ End of table.\n                                break;\n                            }\n                            if (!preg_match('#\\|\\s*(?<symbol>.*)\\s*\\|\\s*(?<dependency>.*)?\\s*\\|#', $line, $matches)) {\n                                throw new RuntimeException('Failed to parse line: ' . $line);\n                            }\n                            $dependency = trim($matches['dependency'] ?? '');\n                            $symbol     = trim($matches['symbol'] ?? '');\n                            if ('' === $dependency) {\n                                $unknown[] = $symbol;\n                                continue;\n                            }\n                            if (!isset($dependencies[$dependency])) {\n                                $dependencies[$dependency] = [];\n                            }\n                            $dependencies[$dependency][] = $symbol;\n                        }\n                        foreach ($dependencies as $dependency => $symbols) {\n                            $this->logDiagnostic(\n                                sprintf(\n                                    'Missing dependency \"%1$s\" (used symbols: \"%2$s\")',\n                                    $dependency,\n                                    implode('\", \"', $symbols)\n                                ),\n                                'error'\n                            );\n                        }\n                        if (!empty($unknown)) {\n                            $this->logDiagnostic(\n                                sprintf(\n                                    'Unknown symbols found: \"%1$s\" - is there a dependency missing?',\n                                    implode('\", \"', $unknown)\n                                ),\n                                'error'\n                            );\n                        }\n                    }\n                };\n            }\n        };\n    }\n};\n","hash":{"type":"sha-512","value":"a9889e09fdc80b785e8d5494fb94ad626ed75f923754129ab37b7f1571641c28a8382822d0196fe785a0c9815d3501bbc6e4cffd69e4c311d39888da232748c3"}},"bootstrap-3":{"plugin-version":"1.0.0","type":"inline","code":"<?php\n\n\/**\n * Tool home: https:\/\/github.com\/phpmd\/phpmd\n *\/\n\nuse Phpcq\\PluginApi\\Version10\\Configuration\\PluginConfigurationBuilderInterface;\nuse Phpcq\\PluginApi\\Version10\\Configuration\\PluginConfigurationInterface;\nuse Phpcq\\PluginApi\\Version10\\DiagnosticsPluginInterface;\nuse Phpcq\\PluginApi\\Version10\\EnvironmentInterface;\nuse Phpcq\\PluginApi\\Version10\\Output\\OutputTransformerFactoryInterface;\nuse Phpcq\\PluginApi\\Version10\\Output\\OutputTransformerInterface;\nuse Phpcq\\PluginApi\\Version10\\Report\\ToolReportInterface;\n\nreturn new class implements DiagnosticsPluginInterface {\n    public function getName(): string\n    {\n        return 'phpmd';\n    }\n\n    public function describeConfiguration(PluginConfigurationBuilderInterface $configOptionsBuilder): void\n    {\n        $configOptionsBuilder->supportDirectories();\n        $configOptionsBuilder\n            ->describeStringListOption(\n                'ruleset',\n                'List of rulesets (cleancode, codesize, controversial, design, naming, unusedcode).'\n            )\n            ->isRequired()\n            ->withDefaultValue(['naming', 'unusedcode']);\n\n        $configOptionsBuilder\n            ->describeStringListOption(\n                'custom_flags',\n                'Any custom flags to pass to phpmd. For valid flags refer to the phpmd documentation.'\n            )\n            ->isRequired()\n            ->withDefaultValue([]);\n    }\n\n    public function createDiagnosticTasks(\n        PluginConfigurationInterface $config,\n        EnvironmentInterface $buildConfig\n    ): iterable {\n        $directories = $config->getStringList('directories');\n\n        $args = [\n            implode(',', $directories),\n            'xml',\n            implode(',', $config->getStringList('ruleset')),\n        ];\n\n        if ($config->has('excluded')) {\n            foreach ($config->getStringList('excluded') as $path) {\n                if ('' === ($path = trim($path))) {\n                    continue;\n                }\n                $args[] = '--exclude=' . $path;\n            }\n        }\n\n        if ($config->has('custom_flags')) {\n            foreach ($config->getStringList('custom_flags') as $value) {\n                $args[] = $value;\n            }\n        }\n\n        $xmlfile = $buildConfig->getUniqueTempFile($this, 'xml');\n        $args[]  = '--report-file';\n        $args[]  = $xmlfile;\n\n        yield $buildConfig\n            ->getTaskFactory()\n            ->buildRunPhar('phpmd', $args)\n            ->withWorkingDirectory($buildConfig->getProjectConfiguration()->getProjectRootPath())\n            ->withOutputTransformer(\n                $this->createOutputTransformer($xmlfile, $buildConfig->getProjectConfiguration()->getProjectRootPath())\n            )\n            ->build();\n    }\n\n    private function createOutputTransformer(string $xmlFile, string $rootDir): OutputTransformerFactoryInterface\n    {\n        return new class ($xmlFile, $rootDir) implements OutputTransformerFactoryInterface {\n            private $xmlFile;\n            private $rootDir;\n\n            public function __construct(string $xmlFile, string $rootDir)\n            {\n                $this->xmlFile = $xmlFile;\n                $this->rootDir = $rootDir;\n            }\n\n            public function createFor(ToolReportInterface $report): OutputTransformerInterface\n            {\n                return new class ($this->xmlFile, $this->rootDir, $report) implements OutputTransformerInterface {\n                    \/** @var string *\/\n                    private $xmlFile;\n                    \/** @var string *\/\n                    private $rootDir;\n                    \/** @var ToolReportInterface *\/\n                    private $report;\n\n                    public function __construct(string $xmlFile, string $rootDir, ToolReportInterface $report)\n                    {\n                        $this->xmlFile = $xmlFile;\n                        $this->rootDir = $rootDir;\n                        $this->report  = $report;\n                    }\n\n\n                    public function write(string $data, int $channel): void\n                    {\n                        \/\/ FIXME: do we also want to parse stdout\/stderr?\n                    }\n\n                    public function finish(int $exitCode): void\n                    {\n                        $xmlDocument = new DOMDocument('1.0');\n                        $xmlDocument->load($this->xmlFile);\n                        $rootNode = $xmlDocument->firstChild;\n\n                        if (!$rootNode instanceof DOMNode) {\n                            $this->report->close(\n                                $exitCode === 0\n                                    ? ToolReportInterface::STATUS_PASSED\n                                    : ToolReportInterface::STATUS_FAILED\n                            );\n                            return;\n                        }\n\n                        foreach ($rootNode->childNodes as $childNode) {\n                            if (!$childNode instanceof DOMElement || $childNode->nodeName !== 'file') {\n                                continue;\n                            }\n\n                            $fileName = $childNode->getAttribute('name');\n                            if (strpos($fileName, $this->rootDir) === 0) {\n                                $fileName = substr($fileName, strlen($this->rootDir) + 1);\n                            }\n\n                            foreach ($childNode->childNodes as $violationNode) {\n                                if (!$violationNode instanceof DOMElement) {\n                                    continue;\n                                }\n\n                                \/*\n                                 * <violation> may have:\n                                 * beginline: starting line of the issue.\n                                 * endline:   ending line of the issue.\n                                 * rule:      name of the rule.\n                                 * ruleset:   name of the ruleset the rule is defined within.\n                                 * package:   namespace of the class where the issue is within.\n                                 * class:     name of the class where the issue is within.\n                                 * method:    name of the method where the issue is within.\n                                 * externalInfoUrl: external URL describing the violation.\n                                 * priority: The priority for the rule.\n                                 *           This can be a value in the range 1-5, where 1 is the highest priority and\n                                 *           5 the lowest priority.\n                                 *\/\n\n                                $message = sprintf(\n                                    '%s%s(Ruleset: %s, %s)',\n                                    trim($violationNode->textContent),\n                                    \"\\n\",\n                                    (string) $this->getXmlAttribute($violationNode, 'ruleset', ''),\n                                    (string) $this->getXmlAttribute($violationNode, 'externalInfoUrl', '')\n                                );\n\n                                $severity = ToolReportInterface::SEVERITY_FATAL;\n                                if (null !== $prio = $this->getIntXmlAttribute($violationNode, 'priority')) {\n                                    \/\/ FIXME: Is this mapping correct?\n                                    switch ($prio) {\n                                        case 1:\n                                        case 2:\n                                        case 3:\n                                            $severity = ToolReportInterface::SEVERITY_MAJOR;\n                                            break;\n                                        case 4:\n                                            $severity = ToolReportInterface::SEVERITY_MINOR;\n                                            break;\n                                        case 5:\n                                        default:\n                                            $severity = ToolReportInterface::SEVERITY_INFO;\n                                    }\n                                }\n\n                                $beginLine = $this->getIntXmlAttribute($violationNode, 'beginline');\n                                $endLine   = $this->getIntXmlAttribute($violationNode, 'endline');\n                                $this->report->addDiagnostic($severity, $message)\n                                    ->forFile($fileName)\n                                        ->forRange(\n                                            (int) $this->getIntXmlAttribute($violationNode, 'beginline'),\n                                            null,\n                                            $endLine !== $beginLine ? $endLine : null,\n                                        )\n                                        ->end()\n                                    ->fromSource((string) $this->getXmlAttribute($violationNode, 'rule'))\n                                    ->end();\n                            }\n                        }\n\n                        $this->report->addAttachment('pmd.xml')\n                                ->fromFile($this->xmlFile)\n                                ->setMimeType('application\/xml')\n                            ->end();\n\n                        $this->report->close(\n                            $exitCode === 0\n                                ? ToolReportInterface::STATUS_PASSED\n                                : ToolReportInterface::STATUS_FAILED\n                        );\n                    }\n\n                    \/**\n                     * @param mixed $defaultValue\n                     *\/\n                    private function getXmlAttribute(\n                        DOMElement $element,\n                        string $attribute,\n                        ?string $defaultValue = null\n                    ): ?string {\n                        if ($element->hasAttribute($attribute)) {\n                            return $element->getAttribute($attribute);\n                        }\n\n                        return $defaultValue;\n                    }\n\n                    private function getIntXmlAttribute(DOMElement $element, string $attribute): ?int\n                    {\n                        $value = $this->getXmlAttribute($element, $attribute);\n                        if ($value === null) {\n                            return null;\n                        }\n\n                        return (int) $value;\n                    }\n                };\n            }\n        };\n    }\n};\n","hash":{"type":"sha-512","value":"b9228d8fc040a97a765c9f2e5bd77e6ace09e05cef49275bed917d4981b42cdb5a94c1d027c6b2caf6d507a8a334ba17c569f56648f384615a6bdfcb0ab006a2"}},"bootstrap-4":{"plugin-version":"1.0.0","type":"inline","code":"<?php\n\n\/**\n * Tool home: https:\/\/github.com\/sebastianbergmann\/phpcpd\n *\/\n\ndeclare(strict_types=1);\n\nuse Phpcq\\PluginApi\\Version10\\Configuration\\PluginConfigurationBuilderInterface;\nuse Phpcq\\PluginApi\\Version10\\Configuration\\PluginConfigurationInterface;\nuse Phpcq\\PluginApi\\Version10\\DiagnosticsPluginInterface;\nuse Phpcq\\PluginApi\\Version10\\EnvironmentInterface;\nuse Phpcq\\PluginApi\\Version10\\Exception\\InvalidConfigurationException;\nuse Phpcq\\PluginApi\\Version10\\Output\\OutputTransformerFactoryInterface;\nuse Phpcq\\PluginApi\\Version10\\Output\\OutputTransformerInterface;\nuse Phpcq\\PluginApi\\Version10\\Report\\ToolReportInterface;\n\nreturn new class implements DiagnosticsPluginInterface {\n    public function getName(): string\n    {\n        return 'phpcpd';\n    }\n\n    public function describeConfiguration(PluginConfigurationBuilderInterface $configOptionsBuilder): void\n    {\n        $configOptionsBuilder->supportDirectories();\n        $configOptionsBuilder\n            ->describeStringListOption('names', 'A list of file names to check.')\n            ->isRequired()\n            ->withDefaultValue(['*.php']);\n\n        $configOptionsBuilder\n            ->describeStringListOption('names_exclude', 'A list of file names to exclude.');\n\n        $configOptionsBuilder->describeStringListOption(\n            'regexps_exclude',\n            'A list of paths regexps to exclude (example: \"#var\/.*_tmp#\")'\n        );\n\n        $configOptionsBuilder\n            ->describeIntOption('min_lines', 'Minimum number of identical lines.')\n            ->isRequired()\n            ->withDefaultValue(5);\n\n        $configOptionsBuilder\n            ->describeIntOption('min_tokens', 'Minimum number of identical tokens.')\n            ->isRequired()\n            ->withDefaultValue(70);\n\n        $configOptionsBuilder\n            ->describeBoolOption('fuzzy', 'Fuzz variable names')\n            ->isRequired()\n            ->withDefaultValue(false);\n\n        $configOptionsBuilder\n            ->describeStringListOption(\n                'custom_flags',\n                'Any custom flags to pass to phpcpd. For valid flags refer to the phpcpd documentation.'\n            )\n            ->withDefaultValue([])\n            ->isRequired();\n\n        $severityText = implode('\", \"', [\n            ToolReportInterface::SEVERITY_NONE,\n            ToolReportInterface::SEVERITY_INFO,\n            ToolReportInterface::SEVERITY_MARGINAL,\n            ToolReportInterface::SEVERITY_MINOR,\n            ToolReportInterface::SEVERITY_MAJOR,\n            ToolReportInterface::SEVERITY_FATAL,\n        ]);\n\n        $configOptionsBuilder\n            ->describeStringOption(\n                'severity',\n                'Severity for detected duplications. Must be one of \"' . $severityText . '\"',\n            )\n            ->isRequired()\n            ->withDefaultValue(ToolReportInterface::SEVERITY_MINOR);\n    }\n\n    public function createDiagnosticTasks(\n        PluginConfigurationInterface $config,\n        EnvironmentInterface $buildConfig\n    ): iterable {\n        $args = [\n            '--log-pmd',\n            $logFile = $buildConfig->getUniqueTempFile($this, 'pmd-cpd.xml')\n        ];\n\n        if ($config->has('names')) {\n            $args[] = '--names=' . implode(',', $config->getStringList('names'));\n        }\n        if ($config->has('names_exclude')) {\n            $args[] = '--names-exclude=' . implode(',', $config->getStringList('names_exclude'));\n        }\n        if ($config->has('regexps_exclude')) {\n            $args[] = '--regexps-exclude';\n            $args[] = implode(',', $config->getStringList('regexps_exclude'));\n        }\n        $args[] = '--min-lines=' . (string) $config->getInt('min_lines');\n        $args[] = '--min-tokens=' . (string) $config->getInt('min_tokens');\n\n        if ($config->getBool('fuzzy')) {\n            $args[] = '--fuzzy';\n        }\n\n        if ($config->has('custom_flags')) {\n            foreach ($config->getStringList('custom_flags') as $value) {\n                if (strpos($value, '--log-pmd') >= 0) {\n                    throw new InvalidConfigurationException('Configuring a custom log file is not allowed.');\n                }\n                $args[] = $value;\n            }\n        }\n\n        $rootDir  = $buildConfig->getProjectConfiguration()->getProjectRootPath();\n        $severity = $config->getString('severity');\n\n        yield $buildConfig\n            ->getTaskFactory()\n            ->buildRunPhar('phpcpd', array_merge($args, $config->getStringList('directories')))\n            ->withOutputTransformer($this->createOutputTransformer($logFile, $rootDir, $severity))\n            ->withWorkingDirectory($buildConfig->getProjectConfiguration()->getProjectRootPath())\n            ->build();\n    }\n\n    private function createOutputTransformer(\n        string $xmlFile,\n        string $rootDir,\n        string $severity\n    ): OutputTransformerFactoryInterface {\n        return new class ($xmlFile, $rootDir, $severity) implements OutputTransformerFactoryInterface {\n            \/** @var string *\/\n            private $xmlFile;\n\n            \/** @var string *\/\n            private $rootDir;\n\n            \/** @var string *\/\n            private $severity;\n\n            public function __construct(string $xmlFile, string $rootDir, string $severity)\n            {\n                $this->xmlFile  = $xmlFile;\n                $this->rootDir  = $rootDir;\n                $this->severity = $severity;\n            }\n\n            public function createFor(ToolReportInterface $report): OutputTransformerInterface\n            {\n                return new class (\n                    $this->xmlFile,\n                    $report,\n                    $this->rootDir,\n                    $this->severity\n                ) implements OutputTransformerInterface {\n                    \/** @var string *\/\n                    private $xmlFile;\n                    \/** @var ToolReportInterface *\/\n                    private $report;\n                    \/** @var string *\/\n                    private $rootDir;\n                    \/** @var string *\/\n                    private $severity;\n\n                    public function __construct(\n                        string $xmlFile,\n                        ToolReportInterface $report,\n                        string $rootDir,\n                        string $severity\n                    ) {\n                        $this->xmlFile = $xmlFile;\n                        $this->report  = $report;\n                        if ('\/' !== substr($rootDir, -1)) {\n                            $rootDir .= '\/';\n                        }\n                        $this->rootDir = $rootDir;\n                        $this->severity = $severity;\n                    }\n\n                    public function write(string $data, int $channel): void\n                    {\n                    }\n\n                    public function finish(int $exitCode): void\n                    {\n                        $xmlDocument = new DOMDocument('1.0');\n                        $xmlDocument->load($this->xmlFile);\n                        $rootNode = $xmlDocument->firstChild;\n\n                        if (!$rootNode instanceof DOMNode) {\n                            $this->report->close(\n                                $exitCode === 0\n                                    ? ToolReportInterface::STATUS_PASSED\n                                    : ToolReportInterface::STATUS_FAILED\n                            );\n                            return;\n                        }\n\n                        foreach ($rootNode->childNodes as $childNode) {\n                            if (!$childNode instanceof DOMElement) {\n                                continue;\n                            }\n\n                            $message = 'Duplicate code fragment';\n                            $toolReport = $this->report->addDiagnostic($this->severity, $message);\n                            $numberOfLines = (int) $childNode->getAttribute('lines');\n\n                            \/** @var DOMElement $fileNode *\/\n                            foreach ($childNode->getElementsByTagName('file') as $fileNode) {\n                                $line = (int) $fileNode->getAttribute('line');\n                                $toolReport\n                                    ->forFile($this->getFileName($fileNode))\n                                    ->forRange($line, null, ($line + $numberOfLines));\n                            }\n                        }\n\n                        $this->report->addAttachment('phpcpd.xml')\n                            ->fromFile($this->xmlFile)\n                            ->setMimeType('application\/xml')\n                            ->end();\n\n                        $this->report->close(\n                            $exitCode === 0\n                                ? ToolReportInterface::STATUS_PASSED\n                                : ToolReportInterface::STATUS_FAILED\n                        );\n                    }\n\n                    private function getFileName(DOMElement $element): string\n                    {\n                        $fileName = $element->getAttribute('path');\n                        if (strpos($fileName, $this->rootDir) === 0) {\n                            $fileName = substr($fileName, strlen($this->rootDir));\n                        }\n\n                        return $fileName;\n                    }\n                };\n            }\n        };\n    }\n};\n","hash":{"type":"sha-512","value":"86f52f4083ea480c37c9424f5ab640bc4275cabdb9a992852db1a0b1b390c8f36c0c2f8929f2a84a7a3e313f5a56f1ad65182fa2c1c6a22344f3fba10ad8122a"}},"bootstrap-5":{"plugin-version":"1.0.0","type":"inline","code":"<?php\n\n\/**\n * Tool home: https:\/\/github.com\/sebastianbergmann\/phploc\n *\/\n\nuse Phpcq\\PluginApi\\Version10\\Configuration\\PluginConfigurationBuilderInterface;\nuse Phpcq\\PluginApi\\Version10\\Configuration\\PluginConfigurationInterface;\nuse Phpcq\\PluginApi\\Version10\\DiagnosticsPluginInterface;\nuse Phpcq\\PluginApi\\Version10\\EnvironmentInterface;\nuse Phpcq\\PluginApi\\Version10\\Output\\OutputTransformerFactoryInterface;\nuse Phpcq\\PluginApi\\Version10\\Output\\OutputTransformerInterface;\nuse Phpcq\\PluginApi\\Version10\\Report\\ToolReportInterface;\n\nreturn new class implements DiagnosticsPluginInterface {\n    public function getName(): string\n    {\n        return 'phploc';\n    }\n\n    public function describeConfiguration(PluginConfigurationBuilderInterface $configOptionsBuilder): void\n    {\n        $configOptionsBuilder->supportDirectories();\n        $configOptionsBuilder\n            ->describeStringListOption(\n                'excluded',\n                'List of excluded files.'\n            )\n            ->withDefaultValue([])\n            ->isRequired()\n            ->withNormalizer(static function ($value) { return trim($value); });\n        $configOptionsBuilder\n            ->describeStringListOption(\n                'custom_flags',\n                'Any custom flags to pass to phploc. For valid flags refer to the phploc documentation.'\n            )\n            ->withDefaultValue([])\n            ->isRequired();\n    }\n\n    public function createDiagnosticTasks(\n        PluginConfigurationInterface $config,\n        EnvironmentInterface $buildConfig\n    ): iterable {\n        $directories = $config->getStringList('directories');\n\n        $args = [\n            '--log-xml',\n            $logFile = $buildConfig->getUniqueTempFile($this, 'log.xml')\n        ];\n        if ($config->has('excluded')) {\n            foreach ($config->getStringList('excluded') as $path) {\n                $args[] = '--exclude=' . $path;\n            }\n        }\n\n        if ($config->has('custom_flags')) {\n            foreach ($config->getStringList('custom_flags') as $value) {\n                $args[] = $value;\n            }\n        }\n\n        yield $buildConfig\n            ->getTaskFactory()\n            ->buildRunPhar('phploc', array_merge($args, $directories))\n            ->withOutputTransformer($this->createOutputTransformer($logFile))\n            ->withWorkingDirectory($buildConfig->getProjectConfiguration()->getProjectRootPath())\n            ->build();\n    }\n\n    private function createOutputTransformer(string $xmlFile): OutputTransformerFactoryInterface\n    {\n        return new class ($xmlFile) implements OutputTransformerFactoryInterface {\n            private $xmlFile;\n\n            public function __construct(string $xmlFile)\n            {\n                $this->xmlFile = $xmlFile;\n            }\n\n            public function createFor(ToolReportInterface $report): OutputTransformerInterface\n            {\n                return new class ($this->xmlFile, $report) implements OutputTransformerInterface {\n                    private const DICTIONARY = [\n                        \/\/ LIST copied from https:\/\/github.com\/sebastianbergmann\/phploc\/blob\/master\/src\/Log\/Csv.php\n                        'directories'                 => 'Directories',\n                        'files'                       => 'Files',\n                        'loc'                         => 'Lines of Code (LOC)',\n                        'ccnByLloc'                   => 'Cyclomatic Complexity \/ Lines of Code',\n                        'cloc'                        => 'Comment Lines of Code (CLOC)',\n                        'ncloc'                       => 'Non-Comment Lines of Code (NCLOC)',\n                        'lloc'                        => 'Logical Lines of Code (LLOC)',\n                        'llocGlobal'                  => 'LLOC outside functions or classes',\n                        'namespaces'                  => 'Namespaces',\n                        'interfaces'                  => 'Interfaces',\n                        'traits'                      => 'Traits',\n                        'classes'                     => 'Classes',\n                        'abstractClasses'             => 'Abstract Classes',\n                        'concreteClasses'             => 'Concrete Classes',\n                        'finalClasses'                => 'Final Classes',\n                        'nonFinalClasses'             => 'Non-Final Classes',\n                        'llocClasses'                 => 'Classes Length (LLOC)',\n                        'methods'                     => 'Methods',\n                        'nonStaticMethods'            => 'Non-Static Methods',\n                        'staticMethods'               => 'Static Methods',\n                        'publicMethods'               => 'Public Methods',\n                        'nonPublicMethods'            => 'Non-Public Methods',\n                        'protectedMethods'            => 'Protected Methods',\n                        'privateMethods'              => 'Private Methods',\n                        'classCcnAvg'                 => 'Cyclomatic Complexity \/ Number of Classes',\n                        'methodCcnAvg'                => 'Cyclomatic Complexity \/ Number of Methods',\n                        'functions'                   => 'Functions',\n                        'namedFunctions'              => 'Named Functions',\n                        'anonymousFunctions'          => 'Anonymous Functions',\n                        'llocFunctions'               => 'Functions Length (LLOC)',\n                        'llocByNof'                   => 'Average Function Length (LLOC)',\n                        'classLlocAvg'                => 'Average Class Length',\n                        'methodLlocAvg'               => 'Average Method Length',\n                        'averageMethodsPerClass'      => 'Average Methods per Class',\n                        'constants'                   => 'Constants',\n                        'globalConstants'             => 'Global Constants',\n                        'classConstants'              => 'Class Constants',\n                        'publicClassConstants'        => 'Public Class Constants',\n                        'nonPublicClassConstants'     => 'Non-Public Class Constants',\n                        'attributeAccesses'           => 'Attribute Accesses',\n                        'instanceAttributeAccesses'   => 'Non-Static Attribute Accesses',\n                        'staticAttributeAccesses'     => 'Static Attribute Accesses',\n                        'methodCalls'                 => 'Method Calls',\n                        'instanceMethodCalls'         => 'Non-Static Method Calls',\n                        'staticMethodCalls'           => 'Static Method Calls',\n                        'globalAccesses'              => 'Global Accesses',\n                        'globalVariableAccesses'      => 'Global Variable Accesses',\n                        'superGlobalVariableAccesses' => 'Super-Global Variable Accesses',\n                        'globalConstantAccesses'      => 'Global Constant Accesses',\n                        'testClasses'                 => 'Test Classes',\n                        'testMethods'                 => 'Test Methods',\n                        \/\/ Custom added words\n                        'ccn'                         => 'Cyclomatic Complexity',\n                    ];\n\n                    \/** @var string *\/\n                    private $xmlFile;\n                    \/** @var ToolReportInterface *\/\n                    private $report;\n\n                    public function __construct(string $xmlFile, ToolReportInterface $report)\n                    {\n                        $this->xmlFile = $xmlFile;\n                        $this->report  = $report;\n                    }\n\n                    public function write(string $data, int $channel): void\n                    {\n                    }\n\n                    public function finish(int $exitCode): void\n                    {\n                        $xmlDocument = new DOMDocument('1.0');\n                        $xmlDocument->load($this->xmlFile);\n                        $rootNode = $xmlDocument->firstChild;\n\n                        if (!$rootNode instanceof DOMNode) {\n                            $this->report->close(\n                                $exitCode === 0\n                                    ? ToolReportInterface::STATUS_PASSED\n                                    : ToolReportInterface::STATUS_FAILED\n                            );\n                            return;\n                        }\n\n                        foreach ($rootNode->childNodes as $childNode) {\n                            if (!$childNode instanceof DOMElement) {\n                                continue;\n                            }\n                            $this->report\n                                ->addDiagnostic(\n                                    ToolReportInterface::SEVERITY_INFO,\n                                    sprintf('%s: %s', $this->createLabel($childNode->nodeName), $childNode->textContent)\n                                )\n                                ->fromSource($childNode->nodeName)\n                                ->withCategory('statistics');\n                        }\n\n                        $this->report->addAttachment('log.xml')\n                            ->fromFile($this->xmlFile)\n                            ->setMimeType('application\/xml')\n                            ->end();\n\n                        $this->report->close(\n                            $exitCode === 0\n                                ? ToolReportInterface::STATUS_PASSED\n                                : ToolReportInterface::STATUS_FAILED\n                        );\n                    }\n\n                    private function createLabel(string $text): string\n                    {\n                        if (null !== ($translated = $this->translateWord($text))) {\n                            return $translated;\n                        }\n\n                        return ucfirst(\n                            implode(\n                                ' ',\n                                array_map(\n                                    function (string $word): string {\n                                        return $this->translateWord(strtolower($word)) ?: $word;\n                                    },\n                                    preg_split('\/(?=[A-Z])\/', $text)\n                                )\n                            )\n                        );\n                    }\n\n                    private function translateWord(string $text): ?string\n                    {\n                        return self::DICTIONARY[$text] ?? null;\n                    }\n                };\n            }\n        };\n    }\n};\n","hash":{"type":"sha-512","value":"cc7e6bdcc1a61b92a09ae07a4f756a93022484501433498aa00960180f52c1b079d743a32b9b46599445f770f5c3ae574353c0bf2b11605270e1aab629743818"}},"bootstrap-6":{"plugin-version":"1.0.0","type":"inline","code":"<?php\n\nuse Phpcq\\PluginApi\\Version10\\Configuration\\PluginConfigurationBuilderInterface;\nuse Phpcq\\PluginApi\\Version10\\Configuration\\PluginConfigurationInterface;\nuse Phpcq\\PluginApi\\Version10\\DiagnosticsPluginInterface;\nuse Phpcq\\PluginApi\\Version10\\EnvironmentInterface;\nuse Phpcq\\PluginApi\\Version10\\Util\\CheckstyleReportAppender;\n\nreturn new class implements DiagnosticsPluginInterface {\n    public function getName(): string\n    {\n        return 'phpcs';\n    }\n\n    public function describeConfiguration(PluginConfigurationBuilderInterface $configOptionsBuilder): void\n    {\n        $configOptionsBuilder->supportDirectories();\n        $configOptionsBuilder\n            ->describeStringOption('standard', 'The default code style')\n            ->isRequired()\n            ->withDefaultValue('PSR12');\n        $configOptionsBuilder\n            ->describeStringListOption('excluded', 'The excluded files and folders.')\n            ->isRequired()\n            ->withDefaultValue([]);\n        $configOptionsBuilder\n            ->describeStringListOption(\n                'custom_flags',\n                'Any custom flags to pass to phpcbf. For valid flags refer to the cphpcs documentation.',\n            )\n            ->isRequired()\n            ->withDefaultValue([]);\n    }\n\n    public function createDiagnosticTasks(\n        PluginConfigurationInterface $config,\n        EnvironmentInterface $environment\n    ): iterable {\n        $projectRoot = $environment->getProjectConfiguration()->getProjectRootPath();\n        $tmpfile     = $environment->getUniqueTempFile($this, 'checkstyle.xml');\n\n        yield $environment\n            ->getTaskFactory()\n            ->buildRunPhar('phpcs', $this->buildArguments($config, $environment, $tmpfile))\n            ->withWorkingDirectory($projectRoot)\n            ->withOutputTransformer(CheckstyleReportAppender::transformFile($tmpfile, $projectRoot))\n            ->build();\n    }\n\n    private function buildArguments(\n        PluginConfigurationInterface $config,\n        EnvironmentInterface $environment,\n        string $tempFile\n    ): array {\n        $arguments = [];\n        $arguments[] = '--standard=' . $config->getString('standard');\n\n        if ([] !== ($excluded = $config->getStringList('excluded'))) {\n            $arguments[] = '--exclude=' . implode(',', $excluded);\n        }\n\n        if ($config->has('custom_flags')) {\n            foreach ($config->getStringList('custom_flags') as $value) {\n                $arguments[] = $value;\n            }\n        }\n\n        $arguments[] = '--parallel=' . $environment->getProjectConfiguration()->getMaxCpuCores();\n        $arguments[] = '--report=checkstyle';\n        $arguments[] = '--report-file=' . $tempFile;\n\n        return array_merge($arguments, $config->getStringList('directories'));\n    }\n};\n","hash":{"type":"sha-512","value":"4c42804590dfca77faa86c732fc992cf853ead8d9d5107ef31b11cd6765cef559b6da193536d8e16dcc08cbb28f8c77ef286335e90935003b8d80b85ca7b3662"}},"bootstrap-7":{"plugin-version":"1.0.0","type":"inline","code":"<?php\n\nuse Phpcq\\PluginApi\\Version10\\Configuration\\PluginConfigurationBuilderInterface;\nuse Phpcq\\PluginApi\\Version10\\Configuration\\PluginConfigurationInterface;\nuse Phpcq\\PluginApi\\Version10\\DiagnosticsPluginInterface;\nuse Phpcq\\PluginApi\\Version10\\EnvironmentInterface;\n\nreturn new class implements DiagnosticsPluginInterface {\n    public function getName(): string\n    {\n        return 'phpcbf';\n    }\n\n    public function describeConfiguration(PluginConfigurationBuilderInterface $configOptionsBuilder): void\n    {\n        $configOptionsBuilder->supportDirectories();\n        $configOptionsBuilder\n            ->describeStringOption('standard', 'The default code style')\n            ->isRequired()\n            ->withDefaultValue('PSR12');\n        $configOptionsBuilder\n            ->describeStringListOption('excluded', 'The excluded files and folders.')\n            ->isRequired()\n            ->withDefaultValue([]);\n        $configOptionsBuilder\n            ->describeStringListOption(\n                'custom_flags',\n                'Any custom flags to pass to phpcbf. For valid flags refer to the cphpcs documentation.',\n            )\n            ->isRequired()\n            ->withDefaultValue([]);\n    }\n\n    public function createDiagnosticTasks(\n        PluginConfigurationInterface $config,\n        EnvironmentInterface $environment\n    ): iterable {\n        yield $environment\n            ->getTaskFactory()\n            ->buildRunPhar('phpcbf', $this->buildArguments($config, $environment))\n            ->withWorkingDirectory($environment->getProjectConfiguration()->getProjectRootPath())\n            ->build();\n    }\n\n    private function buildArguments(PluginConfigurationInterface $config, EnvironmentInterface $environment): array\n    {\n        $arguments   = [];\n        $arguments[] = '--standard=' . $config->getString('standard');\n\n        if ([] !== ($excluded = $config->getStringList('excluded'))) {\n            $arguments[] = '--exclude=' . implode(',', $excluded);\n        }\n\n        if ($config->has('custom_flags')) {\n            foreach ($config->getStringList('custom_flags') as $value) {\n                $arguments[] = $value;\n            }\n        }\n\n        $arguments[] = '--parallel=' . $environment->getProjectConfiguration()->getMaxCpuCores();\n\n        return array_merge($arguments, $config->getStringList('directories'));\n    }\n};\n","hash":{"type":"sha-512","value":"8b86eddc89aad8bc6f4302ab33425864f8c0a98a3e4219866e160f62e5a281f67e823f04436a3a273854af489b5a97fb92cc7fbef8f7e6aa6deb5b0ab339649e"}},"bootstrap-8":{"plugin-version":"1.0.0","type":"inline","code":"<?php\n\nuse Phpcq\\PluginApi\\Version10\\Configuration\\PluginConfigurationBuilderInterface;\nuse Phpcq\\PluginApi\\Version10\\Configuration\\PluginConfigurationInterface;\nuse Phpcq\\PluginApi\\Version10\\DiagnosticsPluginInterface;\nuse Phpcq\\PluginApi\\Version10\\EnvironmentInterface;\nuse Phpcq\\PluginApi\\Version10\\Output\\OutputInterface;\nuse Phpcq\\PluginApi\\Version10\\Output\\OutputTransformerFactoryInterface;\nuse Phpcq\\PluginApi\\Version10\\Output\\OutputTransformerInterface;\nuse Phpcq\\PluginApi\\Version10\\Report\\ReportInterface;\nuse Phpcq\\PluginApi\\Version10\\Report\\ToolReportInterface;\nuse Phpcq\\PluginApi\\Version10\\Util\\BufferedLineReader;\n\nreturn new class implements DiagnosticsPluginInterface {\n    public function getName(): string\n    {\n        return 'composer-normalize';\n    }\n\n    public function describeConfiguration(PluginConfigurationBuilderInterface $configOptionsBuilder): void\n    {\n        $configOptionsBuilder\n            ->describeBoolOption('dry_run', 'Show the results of normalizing, but do not modify any files')\n            ->isRequired()\n            ->withDefaultValue(true);\n        $configOptionsBuilder->describeStringOption('file', 'Path to composer.json file relative to project root');\n        $configOptionsBuilder\n            ->describeIntOption(\n                'indent_size',\n                'Indent size (an integer greater than 0); should be used with the indent_style option'\n            )\n            ->isRequired()\n            ->withDefaultValue(2);\n        $configOptionsBuilder\n            ->describeStringOption(\n                'indent_style',\n                'Indent style (one of \"space\", \"tab\"); should be used with the indent_size option'\n            )\n            ->isRequired()\n            ->withDefaultValue('space');\n        $configOptionsBuilder\n            ->describeBoolOption('no_update_lock', 'Do not update lock file if it exists');\n    }\n\n    public function createDiagnosticTasks(\n        PluginConfigurationInterface $config,\n        EnvironmentInterface $buildConfig\n    ): iterable {\n        $composerJson = $config->has('file') ? $config->getString('file') : 'composer.json';\n\n        yield $buildConfig\n            ->getTaskFactory()\n            ->buildRunPhar('composer-normalize', $this->buildArguments($config))\n            ->withWorkingDirectory($buildConfig->getProjectConfiguration()->getProjectRootPath())\n            ->withOutputTransformer($this->createOutputTransformerFactory($composerJson))\n            ->build();\n    }\n\n    private function buildArguments(PluginConfigurationInterface $config): array\n    {\n        $arguments = [];\n        if ($config->has('file')) {\n            $arguments[] = $config->getString('file');\n        }\n        if ($config->getBool('dry_run')) {\n            $arguments[] = '--dry-run';\n        }\n        $arguments[] = '--indent-size';\n        $arguments[] = (string) $config->getInt('indent_size');\n        $arguments[] = '--indent-style';\n        $arguments[] = (string) $config->getString('indent_style');\n\n        if ($config->has('no_update_lock')) {\n            $arguments[] = '--no-update-lock';\n        }\n\n        return $arguments;\n    }\n\n    private function createOutputTransformerFactory(string $composerFile): OutputTransformerFactoryInterface\n    {\n        return new class ($composerFile) implements OutputTransformerFactoryInterface {\n            \/** @var string *\/\n            private $composerFile;\n\n            public function __construct(string $composerFile)\n            {\n                $this->composerFile = $composerFile;\n            }\n\n            public function createFor(ToolReportInterface $report): OutputTransformerInterface\n            {\n                return new class ($this->composerFile, $report) implements OutputTransformerInterface {\n                    private const REGEX_IN_APPLICATION = '#^In Application\\.php line [0-9]*:$#';\n                    private const REGEX_NOT_WRITABLE = '#^.* is not writable\\.$#';\n                    private const REGEX_NOT_NORMALIZED = '#^.* is not normalized\\.$#';\n                    private const REGEX_IS_NORMALIZED = '#^.* is already normalized\\.$#';\n                    private const REGEX_XDEBUG_ENABLED = '#^(?<message>You are running composer with Xdebug enabled\\.' .\n                    ' This has a major impact on runtime performance\\. See https:\/\/getcomposer.org\/xdebug)$#';\n                    private const REGEX_LOCK_OUTDATED = '#^(?<message>The lock file is not up to date with the latest' .\n                    ' changes in composer\\.json, it is recommended that you run `composer update --lock`\\.)$#';\n                    private const REGEX_SCHEMA_VIOLATION = '#^.* does not match the expected JSON schema:$#';\n                    private const REGEX_SKIPPED_COMMAND = '#^(?<message>Plugin command normalize \\(.*\\) would' .\n                    ' override a Composer command and has been skipped)#';\n\n                    \/** @var string *\/\n                    private $composerFile;\n                    \/** @var BufferedLineReader *\/\n                    private $data;\n                    \/** @var string *\/\n                    private $diff = '';\n                    \/** @var ToolReportInterface *\/\n                    private $report;\n\n                    public function __construct(string $composerFile, ToolReportInterface $report)\n                    {\n                        $this->composerFile = $composerFile;\n                        $this->report       = $report;\n                        $this->data         = BufferedLineReader::create();\n                    }\n\n                    public function write(string $data, int $channel): void\n                    {\n                        if (OutputInterface::CHANNEL_STDOUT === $channel) {\n                            \/\/ This is the ONLY line that is on output channel instead of error.\n                            if (1 === preg_match(self::REGEX_IS_NORMALIZED, $dummy = trim($data))) {\n                                $this->logDiagnostic(\n                                    $this->composerFile . ' is normalized.',\n                                    ToolReportInterface::SEVERITY_INFO\n                                );\n                                return;\n                            }\n                            $this->diff .= $data;\n                            return;\n                        }\n\n                        $this->data->push($data);\n                    }\n\n                    public function finish(int $exitCode): void\n                    {\n                        $this->process();\n                        $this->report->close(0 === $exitCode\n                            ? ReportInterface::STATUS_PASSED\n                            : ReportInterface::STATUS_FAILED);\n                    }\n\n                    private function logDiagnostic(string $message, string $severity): void\n                    {\n                        $this->report->addDiagnostic($severity, $message)->forFile($this->composerFile)->end()->end();\n                    }\n\n                    private function process(): void\n                    {\n                        $unknown = [];\n                        while (null !== $line = $this->data->fetch()) {\n                            if (!$this->processLine($line)) {\n                                $unknown[] = $line;\n                            }\n                        }\n\n                        if ([] !== $unknown) {\n                            $this->logDiagnostic(\n                                'Did not understand the following tool output: ' . \"\\n\" .\n                                implode(\"\\n\", $unknown),\n                                'warning'\n                            );\n                            $this->report\n                                ->addAttachment('composer-normalize-raw.txt')\n                                ->fromString($this->data->getData())\n                                ->end();\n                        }\n\n                        if ('' !== $this->diff) {\n                            $this->report\n                                ->addDiff('composer.json-normalized.diff')\n                                    ->fromString($this->diff)\n                                ->end();\n                        }\n                    }\n\n                    private function processLine(string $line): bool\n                    {\n                        \/\/ Never process empty lines.\n                        if (empty($line)) {\n                            return true;\n                        }\n\n                        foreach (\n                            \/\/ Regex => callback (...<named match>): void\n                            [\n                                self::REGEX_IN_APPLICATION => function (): void {\n                                    \/\/ Ignore header.\n                                },\n                                self::REGEX_NOT_WRITABLE => function (): void {\n                                    $this->logDiagnostic(\n                                        $this->composerFile . ' is not writable.',\n                                        ToolReportInterface::SEVERITY_FATAL\n                                    );\n                                },\n                                self::REGEX_NOT_NORMALIZED => function (): void {\n                                    $this->logDiagnostic(\n                                        $this->composerFile . ' is not normalized.',\n                                        ToolReportInterface::SEVERITY_MAJOR\n                                    );\n                                },\n                                self::REGEX_XDEBUG_ENABLED => function (string $message): void {\n                                    $this->logDiagnostic($message, ToolReportInterface::SEVERITY_INFO);\n                                },\n                                self::REGEX_LOCK_OUTDATED => function (string $message): void {\n                                    $this->logDiagnostic($message, ToolReportInterface::SEVERITY_MAJOR);\n                                },\n                                self::REGEX_SCHEMA_VIOLATION => function (): void {\n                                    while (null !== $line = $this->data->peek()) {\n                                        if (empty($line)) {\n                                            $this->data->fetch();\n                                            continue;\n                                        }\n                                        if ('-' === $line[0]) {\n                                            $error = substr($line, 2);\n                                            $this->data->fetch();\n                                            \/\/ Collect wrapped lines.\n                                            while (null !== $line = $this->data->peek()) {\n                                                if (empty($line)) {\n                                                    break;\n                                                }\n                                                if ('-' !== $line[0]) {\n                                                    $error .= ' ' . $line;\n                                                    $this->data->fetch();\n                                                    continue;\n                                                }\n                                                break;\n                                            }\n                                            $this->logDiagnostic($error, ToolReportInterface::SEVERITY_FATAL);\n                                        }\n                                        if (\n                                            'See https:\/\/getcomposer.org\/doc\/04-schema.md for details on the schema'\n                                            === $line\n                                        ) {\n                                            $this->data->fetch();\n                                            break;\n                                        }\n                                    }\n                                },\n                                self::REGEX_SKIPPED_COMMAND => function (string $message): void {\n                                    $this->logDiagnostic($message, ToolReportInterface::SEVERITY_INFO);\n                                },\n                            ] as $pattern => $handler\n                        ) {\n                            if (1 === preg_match($pattern, $line, $matches)) {\n                                $variables = array_filter($matches, 'is_string', ARRAY_FILTER_USE_KEY);\n                                call_user_func_array($handler, $variables);\n                                return true;\n                            }\n                        }\n                        return false;\n                    }\n                };\n            }\n        };\n    }\n};\n","hash":{"type":"sha-512","value":"73f5d9ba5d3d6ecf93073daf9e9ed021783fb646add145259388d8be17c91a5a14911096137b9789c5aaee08c7152188aee5bbbd43fee393f82924b8386df3d2"}}},"phars":{"phpunit":[{"version":"9.2.5","phar-url":"https:\/\/phar.phpunit.de\/phpunit-9.2.5.phar","bootstrap":"bootstrap-0","requirements":{"php":"^7.3","ext-dom":"*","ext-json":"*","ext-libxml":"*","ext-mbstring":"*","ext-xml":"*","ext-xmlwriter":"*"},"hash":{"type":"sha-256","value":"4e229c51ab441da2c2e4e7eb824fb79d3cf5e55607cc86e0c09b74f1474b105f"},"signature":"https:\/\/phar.phpunit.de\/phpunit-9.2.5.phar.asc"}],"psalm":[{"version":"3.12.1","phar-url":"https:\/\/github.com\/vimeo\/psalm\/releases\/download\/3.12.1\/psalm.phar","bootstrap":"bootstrap-1","requirements":{"php":"^7.1.3|^8","ext-SimpleXML":"*","ext-dom":"*","ext-json":"*","ext-libxml":"*","ext-tokenizer":"*"},"hash":null,"signature":"https:\/\/github.com\/vimeo\/psalm\/releases\/download\/3.12.1\/psalm.phar.asc"}],"composer-require-checker":[{"version":"2.1.0","phar-url":"https:\/\/github.com\/maglnet\/ComposerRequireChecker\/releases\/download\/2.1.0\/composer-require-checker.phar","bootstrap":"bootstrap-2","requirements":{"php":"^7.2","ext-json":"*","ext-phar":"*"},"hash":null,"signature":"https:\/\/github.com\/maglnet\/ComposerRequireChecker\/releases\/download\/2.1.0\/composer-require-checker.phar.asc"}],"phpmd":[{"version":"2.8.2","phar-url":"https:\/\/github.com\/phpmd\/phpmd\/releases\/download\/2.8.2\/phpmd.phar","bootstrap":"bootstrap-3","requirements":{"php":">=5.3.9","ext-xml":"*"},"hash":null,"signature":null}],"phpcpd":[{"version":"5.0.2","phar-url":"https:\/\/phar.phpunit.de\/phpcpd-5.0.2.phar","bootstrap":"bootstrap-4","requirements":{"php":"^7.3","ext-dom":"*"},"hash":{"type":"sha-256","value":"12e94af9928be2f33fd394d2cc5d96b3925de24d614381d06b3096cc9eeabbcb"},"signature":"https:\/\/phar.phpunit.de\/phpcpd-5.0.2.phar.asc"}],"phploc":[{"version":"6.0.2","phar-url":"https:\/\/phar.phpunit.de\/phploc-6.0.2.phar","bootstrap":"bootstrap-5","requirements":{"php":"^7.3","ext-dom":"*","ext-json":"*"},"hash":{"type":"sha-256","value":"1ccb826b0a55b9d77b17656ad72f9c90877737a4a4be3f1517dda73524bfb16e"},"signature":"https:\/\/phar.phpunit.de\/phploc-6.0.2.phar.asc"}],"phpcs":[{"version":"3.5.5","phar-url":"https:\/\/github.com\/squizlabs\/PHP_CodeSniffer\/releases\/download\/3.5.5\/phpcs.phar","bootstrap":"bootstrap-6","requirements":{"php":">=5.4.0","ext-tokenizer":"*","ext-xmlwriter":"*","ext-simplexml":"*"},"hash":null,"signature":"https:\/\/github.com\/squizlabs\/PHP_CodeSniffer\/releases\/download\/3.5.5\/phpcs.phar.asc"}],"phpcbf":[{"version":"3.5.5","phar-url":"https:\/\/github.com\/squizlabs\/PHP_CodeSniffer\/releases\/download\/3.5.5\/phpcbf.phar","bootstrap":"bootstrap-7","requirements":{"php":">=5.4.0","ext-tokenizer":"*","ext-xmlwriter":"*","ext-simplexml":"*"},"hash":null,"signature":"https:\/\/github.com\/squizlabs\/PHP_CodeSniffer\/releases\/download\/3.5.5\/phpcbf.phar.asc"}],"composer-normalize":[{"version":"2.5.1","phar-url":"https:\/\/github.com\/ergebnis\/composer-normalize\/releases\/download\/2.5.1\/composer-normalize.phar","bootstrap":"bootstrap-8","requirements":{"php":"^7.1"},"hash":null,"signature":"https:\/\/github.com\/ergebnis\/composer-normalize\/releases\/download\/2.5.1\/composer-normalize.phar.asc"}]}}