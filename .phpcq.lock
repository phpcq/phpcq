{"bootstraps":{"bootstrap-0":{"plugin-version":"1.0.0","type":"inline","code":"<?php\n\nuse Phpcq\\PluginApi\\Version10\\BuildConfigInterface;\nuse Phpcq\\PluginApi\\Version10\\ConfigurationOptionsBuilderInterface;\nuse Phpcq\\PluginApi\\Version10\\ConfigurationPluginInterface;\nuse Phpcq\\PluginApi\\Version10\\OutputTransformerFactoryInterface;\nuse Phpcq\\PluginApi\\Version10\\OutputTransformerInterface;\nuse Phpcq\\PluginApi\\Version10\\ToolReportInterface;\nuse Phpcq\\PluginApi\\Version10\\Util\\JUnitReportAppender;\n\nreturn new class implements ConfigurationPluginInterface {\n    public function getName(): string\n    {\n        return 'phpunit';\n    }\n\n    public function describeOptions(ConfigurationOptionsBuilderInterface $configOptionsBuilder): void\n    {\n        $configOptionsBuilder->describeArrayOption(\n            'custom_flags',\n            'Any custom flags to pass to phpunit. For valid flags refer to the phpunit documentation.',\n        );\n    }\n\n    public function processConfig(array $config, BuildConfigInterface $buildConfig): iterable\n    {\n        $args = [\n            '--log-junit',\n            $logFile = $buildConfig->getUniqueTempFile($this, 'junit-log.xml')\n        ];\n\n        if ([] !== ($values = $config['custom_flags'] ?? [])) {\n            foreach ($values as $value) {\n                $args[] = (string) $value;\n            }\n        }\n\n        $projectRoot = $buildConfig->getProjectConfiguration()->getProjectRootPath();\n        yield $buildConfig\n            ->getTaskFactory()\n            ->buildRunPhar('phpunit', $args)\n            ->withWorkingDirectory($projectRoot)\n            ->withOutputTransformer($this->createOutputTransformerFactory($logFile, $projectRoot))\n            ->build();\n    }\n\n    private function createOutputTransformerFactory(\n        string $logFile,\n        string $rootDir\n    ): OutputTransformerFactoryInterface {\n        return new class ($logFile, $rootDir) implements OutputTransformerFactoryInterface {\n            private $logFile;\n            private $rootDir;\n\n            public function __construct(string $logFile, string $rootDir)\n            {\n                $this->logFile = $logFile;\n                $this->rootDir = $rootDir;\n            }\n\n            public function createFor(ToolReportInterface $report): OutputTransformerInterface\n            {\n                return new class ($this->logFile, $this->rootDir, $report) implements OutputTransformerInterface {\n                    \/** @var string *\/\n                    private $logFile;\n                    \/** @var string *\/\n                    private $rootDir;\n                    \/** @var ToolReportInterface *\/\n                    private $report;\n\n                    public function __construct(string $logFile, string $rootDir, ToolReportInterface $report)\n                    {\n                        $this->logFile = $logFile;\n                        $this->rootDir = $rootDir;\n                        $this->report  = $report;\n                    }\n\n                    public function write(string $data, int $channel): void\n                    {\n                        \/\/ FIXME: do we also want to parse stdout\/stderr?\n                    }\n\n                    public function finish(int $exitCode): void\n                    {\n                        $this->report->addAttachment('junit-log.xml')->fromFile($this->logFile)->end();\n                        JUnitReportAppender::appendFileTo($this->report, $this->logFile, $this->rootDir);\n                        $this->report->close(\n                            $exitCode === 0 ? ToolReportInterface::STATUS_PASSED : ToolReportInterface::STATUS_FAILED\n                        );\n                    }\n                };\n            }\n        };\n    }\n};\n"},"bootstrap-1":{"plugin-version":"1.0.0","type":"inline","code":"<?php\n\nuse Phpcq\\PluginApi\\Version10\\BuildConfigInterface;\nuse Phpcq\\PluginApi\\Version10\\ConfigurationOptionsBuilderInterface;\nuse Phpcq\\PluginApi\\Version10\\ConfigurationPluginInterface;\nuse Phpcq\\PluginApi\\Version10\\Util\\CheckstyleReportAppender;\n\nreturn new class implements ConfigurationPluginInterface {\n    public function getName(): string\n    {\n        return 'psalm';\n    }\n\n    public function describeOptions(ConfigurationOptionsBuilderInterface $configOptionsBuilder): void\n    {\n        $configOptionsBuilder\n            ->describeBoolOption('debug', 'Show debug information.')\n            ->describeBoolOption('debug_by_line', 'Debug information on a line-by-line level')\n            ->describeBoolOption('shepherd', 'Send data to Shepherd, Psalm\\'s GitHub integration tool.')\n            ->describeStringOption('shepherd_host', 'Override shepherd host');\n\n        $configOptionsBuilder->describeArrayOption(\n            'custom_flags',\n            'Any custom flags to pass to phpunit. For valid flags refer to the phpunit documentation.',\n        );\n    }\n\n    public function processConfig(array $config, BuildConfigInterface $buildConfig): iterable\n    {\n        $projectRoot = $buildConfig->getProjectConfiguration()->getProjectRootPath();\n        $tmpfile     = $buildConfig->getUniqueTempFile($this, 'checkstyle.xml');\n\n        yield $buildConfig\n            ->getTaskFactory()\n            ->buildRunPhar('psalm', $this->buildArguments($config, $tmpfile))\n            ->withWorkingDirectory($projectRoot)\n            ->withOutputTransformer(CheckstyleReportAppender::transformFile($tmpfile, $projectRoot))\n            ->build();\n    }\n\n    private function buildArguments(array $config, string $tempFile): array\n    {\n        $arguments = [];\n\n        foreach (['debug', 'debug_by_line'] as $flag) {\n            if (isset($config[$flag])) {\n                $arguments[] = '--' .  str_replace('_', '-', $flag);\n            }\n        }\n\n        if (isset($config['shepherd'])) {\n            if (isset($config['shepherd_host'])) {\n                $arguments[] = '--shepherd=' . $config['shepherd_host'];\n            } else {\n                $arguments[] = '--shepherd';\n            }\n        }\n\n        if ([] !== ($values = $config['custom_flags'] ?? [])) {\n            foreach ($values as $value) {\n                $arguments[] = (string) $value;\n            }\n        }\n\n        $arguments[] = '--report=' . $tempFile;\n\n        return $arguments;\n    }\n};\n"},"bootstrap-2":{"plugin-version":"1.0.0","type":"inline","code":"<?php\n\nuse Phpcq\\PluginApi\\Version10\\BuildConfigInterface;\nuse Phpcq\\PluginApi\\Version10\\ConfigurationOptionsBuilderInterface;\nuse Phpcq\\PluginApi\\Version10\\ConfigurationPluginInterface;\nuse Phpcq\\PluginApi\\Version10\\OutputTransformerFactoryInterface;\nuse Phpcq\\PluginApi\\Version10\\OutputTransformerInterface;\nuse Phpcq\\PluginApi\\Version10\\ReportInterface;\nuse Phpcq\\PluginApi\\Version10\\ToolReportInterface;\nuse Phpcq\\PluginApi\\Version10\\Util\\BufferedLineReader;\n\nreturn new class implements ConfigurationPluginInterface {\n    public function getName(): string\n    {\n        return 'composer-require-checker';\n    }\n\n    public function describeOptions(ConfigurationOptionsBuilderInterface $configOptionsBuilder): void\n    {\n        $configOptionsBuilder\n            ->describeStringOption('config_file', 'Path to configuration file')\n            ->describeStringOption('composer_file', 'Path to the composer.json', 'composer.json');\n\n        $configOptionsBuilder->describeArrayOption(\n            'custom_flags',\n            'Any custom flags to pass to composer-require-checker. ' .\n            'For valid flags refer to the composer-require-checker documentation.',\n        );\n    }\n\n    public function processConfig(array $config, BuildConfigInterface $buildConfig): iterable\n    {\n        $composerJson = $config['composer_file'] ?? 'composer.json';\n        assert(is_string($composerJson));\n\n        yield $buildConfig\n            ->getTaskFactory()\n            ->buildRunPhar('composer-require-checker', $this->buildArguments($config, $buildConfig))\n            ->withWorkingDirectory($buildConfig->getProjectConfiguration()->getProjectRootPath())\n            ->withOutputTransformer($this->createOutputTransformerFactory($composerJson))\n            ->build();\n    }\n\n    \/** @psalm-return array<int, string> *\/\n    private function buildArguments(array $config, BuildConfigInterface $buildConfig): array\n    {\n        $arguments = ['check'];\n\n        $projectRoot = $buildConfig->getProjectConfiguration()->getProjectRootPath() . '\/';\n        if (isset($config['config_file'])) {\n            $arguments[] = '--config-file=' . $projectRoot . (string) $config['config_file'];\n        }\n\n        if (isset($config['composer_file'])) {\n            $arguments[] = $projectRoot . (string) $config['composer_file'];\n        }\n\n        if ([] !== ($values = $config['custom_flags'] ?? [])) {\n            foreach ($values as $value) {\n                $arguments[] = (string) $value;\n            }\n        }\n\n        return $arguments;\n    }\n\n    private function createOutputTransformerFactory(string $composerFile): OutputTransformerFactoryInterface\n    {\n        return new class ($composerFile) implements OutputTransformerFactoryInterface {\n            \/** @var string *\/\n            private $composerFile;\n\n            public function __construct(string $composerFile)\n            {\n                $this->composerFile = $composerFile;\n            }\n\n            public function createFor(ToolReportInterface $report): OutputTransformerInterface\n            {\n                return new class ($this->composerFile, $report) implements OutputTransformerInterface {\n\n                    \/\/ eg. ComposerRequireChecker 2.1.0@0c66698d487fcb5c66cf07108e2180c818fb2e72\n                    private const REGEX_HEADER = '#ComposerRequireChecker [0-9]*\\.[0-9]*\\.[0-9]*#';\n\n                    private const REGEX_USAGE_SUMMARY =\n                        '#check \\[--config-file CONFIG-FILE] \\[--ignore-parse-errors] \\[--] \\[<composer-json>]#';\n\n                    \/** @var string *\/\n                    private $composerFile;\n                    \/** @var BufferedLineReader *\/\n                    private $data;\n                    \/** @var ToolReportInterface *\/\n                    private $report;\n\n                    public function __construct(string $composerFile, ToolReportInterface $report)\n                    {\n                        $this->composerFile = $composerFile;\n                        $this->report       = $report;\n                        $this->data         = BufferedLineReader::create();\n                    }\n\n                    public function write(string $data, int $channel): void\n                    {\n                        $this->data->push($data);\n                    }\n\n                    public function finish(int $exitCode): void\n                    {\n                        $this->process();\n                        $this->report->close(0 === $exitCode\n                            ? ReportInterface::STATUS_PASSED\n                            : ReportInterface::STATUS_FAILED);\n                    }\n\n                    private function logDiagnostic(string $message, string $severity): void\n                    {\n                        $this->report->addDiagnostic($severity, $message)->forFile($this->composerFile)->end()->end();\n                    }\n\n                    private function process(): void\n                    {\n                        \/\/ FIXME: this should be a state machine to parse incomplete output but for the moment it works.\n                        $unknown = [];\n                        while (null !== $line = $this->data->peek()) {\n                            if ($this->isLineIgnored($line)) {\n                                $this->data->fetch();\n                                continue;\n                            }\n\n                            \/\/ Could be notification of missing dependencies.\n                            \/\/ In LocateComposerPackageDirectDependenciesSourceFiles.php line 52:\n                            if (preg_match('#In LocateComposerPackageDirectDependenciesSourceFiles\\.php#', $line)) {\n                                $this->data->fetch();\n                                $this->processLocateComposerPackageDirectDependenciesSourceFiles();\n                                continue;\n                            }\n\n                            \/\/ Missing dependencies found, parse the table.\n                            if (preg_match('#The following unknown symbols were found:#', $line)) {\n                                $this->data->fetch();\n                                $this->processMissingSymbols();\n                                continue;\n                            }\n\n                            if (preg_match('#There were no unknown symbols found\\.#', $line)) {\n                                $this->data->fetch();\n                                $this->logDiagnostic($line, 'info');\n                                continue;\n                            }\n                            $unknown[] = $line;\n                            $this->data->fetch();\n                        }\n                        if ([] !== $unknown) {\n                            $this->logDiagnostic(\n                                'Did not understand the following output from composer-require-checker: ' .\n                                implode(\"\\n\", $unknown),\n                                'warning'\n                            );\n                            $this->report\n                                ->addAttachment('composer-require-checker.log')\n                                    ->fromString($this->data->getData())\n                                ->end();\n                        }\n                    }\n\n                    private function isLineIgnored(string $line): bool\n                    {\n                        if ('' === $line) {\n                            return true;\n                        }\n                        \/\/ If it is the version header, ignore it.\n                        if (preg_match(self::REGEX_HEADER, $line)) {\n                            return true;\n                        }\n\n                        \/\/ If it is the usage suffix, ignore it.\n                        if (preg_match(self::REGEX_USAGE_SUMMARY, $line)) {\n                            $this->data->fetch();\n                            return true;\n                        }\n\n                        return false;\n                    }\n\n                    private function processLocateComposerPackageDirectDependenciesSourceFiles(): void\n                    {\n                        \/\/ Format is:\n                        \/\/ \\n\\n<message>\\n\n                        $error = '';\n                        \/\/ Buffer up until two empty lines.\n                        while (null !== $line = $this->data->fetch()) {\n                            if (!$this->isLineIgnored($line)) {\n                                $error .= $line;\n                            }\n                        }\n                        if ('' !== $error) {\n                            $this->logDiagnostic($error, 'error');\n                        }\n                    }\n\n                    private function processMissingSymbols(): void\n                    {\n                        \/*\n                         * The following unknown symbols were found:\n                         * +----------------+--------------------+\n                         * | unknown symbol | guessed dependency |\n                         * +----------------+--------------------+\n                         * | DOMDocument    | ext-dom            |\n                         * | DOMElement     | ext-dom            |\n                         * | DOMNode        | ext-dom            |\n                         * +----------------+--------------------+\n                        *\/\n\n                        \/\/ Strip table head.\n                        foreach (\n                            [\n                                '#^\\+-*\\+-*\\+$#',\n                                '#\\|\\s*unknown symbol\\s*\\|\\s*guessed dependency\\s*\\|#',\n                                '#^\\+-*\\+-*\\+$#',\n                            ] as $regex\n                        ) {\n                            if (1 !== preg_match($regex, $line = (string) $this->data->fetch())) {\n                                throw new RuntimeException('Failed to parse line: ' . $line);\n                            }\n                        }\n                        \/\/ List missing dependencies.\n                        $dependencies = [];\n                        $unknown      = [];\n                        while (null !== $line = $this->data->fetch()) {\n                            if (preg_match('#^\\+-*\\+-*\\+$#', $line)) {\n                                \/\/ End of table.\n                                break;\n                            }\n                            if (!preg_match('#\\|\\s*(?<symbol>.*)\\s*\\|\\s*(?<dependency>.*)?\\s*\\|#', $line, $matches)) {\n                                throw new RuntimeException('Failed to parse line: ' . $line);\n                            }\n                            $dependency = trim($matches['dependency'] ?? '');\n                            $symbol     = trim($matches['symbol'] ?? '');\n                            if ('' === $dependency) {\n                                $unknown[] = $symbol;\n                                continue;\n                            }\n                            if (!isset($dependencies[$dependency])) {\n                                $dependencies[$dependency] = [];\n                            }\n                            $dependencies[$dependency][] = $symbol;\n                        }\n                        foreach ($dependencies as $dependency => $symbols) {\n                            $this->logDiagnostic(\n                                sprintf(\n                                    'Missing dependency \"%1$s\" (used symbols: \"%2$s\")',\n                                    $dependency,\n                                    implode('\", \"', $symbols)\n                                ),\n                                'error'\n                            );\n                        }\n                        if (!empty($unknown)) {\n                            $this->logDiagnostic(\n                                sprintf(\n                                    'Unknown symbols found: \"%1$s\" - is there a dependency missing?',\n                                    implode('\", \"', $unknown)\n                                ),\n                                'error'\n                            );\n                        }\n                    }\n                };\n            }\n        };\n    }\n};\n"},"bootstrap-3":{"plugin-version":"1.0.0","type":"inline","code":"<?php\n\n\/**\n * Tool home: https:\/\/github.com\/phpmd\/phpmd\n *\/\n\nuse Phpcq\\PluginApi\\Version10\\BuildConfigInterface;\nuse Phpcq\\PluginApi\\Version10\\ConfigurationOptionsBuilderInterface;\nuse Phpcq\\PluginApi\\Version10\\ConfigurationPluginInterface;\nuse Phpcq\\PluginApi\\Version10\\OutputTransformerFactoryInterface;\nuse Phpcq\\PluginApi\\Version10\\OutputTransformerInterface;\nuse Phpcq\\PluginApi\\Version10\\ReportInterface;\nuse Phpcq\\PluginApi\\Version10\\ToolReportInterface;\n\nreturn new class implements ConfigurationPluginInterface {\n    public function getName(): string\n    {\n        return 'phpmd';\n    }\n\n    public function describeOptions(ConfigurationOptionsBuilderInterface $configOptionsBuilder): void\n    {\n        $configOptionsBuilder->describeArrayOption(\n            'ruleset',\n            'List of rulesets (cleancode, codesize, controversial, design, naming, unusedcode).',\n            [\n                'naming',\n                'unusedcode'\n            ]\n        );\n\n        $configOptionsBuilder->describeArrayOption(\n            'custom_flags',\n            'Any custom flags to pass to phpmd.'\n        );\n\n        $configOptionsBuilder->describeArrayOption(\n            'directories',\n            'Source directories to be analyzed with phpmd.'\n        );\n    }\n\n\n    public function processConfig(array $config, BuildConfigInterface $buildConfig): iterable\n    {\n        [$should, $excluded] = $this->processDirectories($config['directories']);\n\n        $flags = ['ruleset' => 'naming,unusedcode'];\n\n        foreach ($flags as $key => $value) {\n            if ('' !== ($value = $this->commaValues($config, $key))) {\n                $flags[$key] = $value;\n            }\n        }\n\n        $args = [\n            implode(',', $should),\n            'xml',\n            $flags['ruleset'],\n        ];\n\n        if ([] !== $excluded) {\n            $exclude = [];\n            foreach ($excluded as $path) {\n                if ('' === ($path = trim($path))) {\n                    continue;\n                }\n                $exclude[] = $path;\n            }\n            $args[] = '--exclude=' . implode(',', $exclude);\n        }\n        if ([] !== ($values = $config['custom_flags'] ?? [])) {\n            foreach ($values as $value) {\n                $args[] = (string) $value;\n            }\n        }\n\n        $xmlfile = $xmlfile = $buildConfig->getUniqueTempFile($this, 'xml');\n        $args[] = '--report-file';\n        $args[] = $xmlfile;\n\n        yield $buildConfig\n            ->getTaskFactory()\n            ->buildRunPhar('phpmd', $args)\n            ->withWorkingDirectory($buildConfig->getProjectConfiguration()->getProjectRootPath())\n            ->withOutputTransformer(\n                $this->createOutputTransformer($xmlfile, $buildConfig->getProjectConfiguration()->getProjectRootPath())\n            )\n            ->build();\n    }\n\n    \/**\n     * Process the directory list.\n     *\n     * @param array $directories The directory list.\n     *\n     * @return array\n     *\/\n    private function processDirectories(array $directories): array\n    {\n        $should  = [];\n        $exclude = [];\n        foreach ($directories as $directory => $dirConfig) {\n            $should[] = $directory;\n            if (null !== $dirConfig) {\n                if (isset($dirConfig['excluded'])) {\n                    foreach ($dirConfig['excluded'] as $excl) {\n                        $exclude[] = $directory . '\/' . $excl;\n                    }\n                }\n            }\n        }\n        return [$should, $exclude];\n    }\n\n    private function commaValues(array $config, string $key): string\n    {\n        if (!isset($config[$key])) {\n            return '';\n        }\n        return implode(',', (array) $config[$key]);\n    }\n\n    private function createOutputTransformer(string $xmlFile, string $rootDir): OutputTransformerFactoryInterface\n    {\n        return new class ($xmlFile, $rootDir) implements OutputTransformerFactoryInterface {\n            private $xmlFile;\n            private $rootDir;\n\n            public function __construct(string $xmlFile, string $rootDir)\n            {\n                $this->xmlFile = $xmlFile;\n                $this->rootDir = $rootDir;\n            }\n\n            public function createFor(ToolReportInterface $report): OutputTransformerInterface\n            {\n                return new class ($this->xmlFile, $this->rootDir, $report) implements OutputTransformerInterface {\n                    \/** @var string *\/\n                    private $xmlFile;\n                    \/** @var string *\/\n                    private $rootDir;\n                    \/** @var ToolReportInterface *\/\n                    private $report;\n\n                    public function __construct(string $xmlFile, string $rootDir, ToolReportInterface $report)\n                    {\n                        $this->xmlFile = $xmlFile;\n                        $this->rootDir = $rootDir;\n                        $this->report  = $report;\n                    }\n\n\n                    public function write(string $data, int $channel): void\n                    {\n                        \/\/ FIXME: do we also want to parse stdout\/stderr?\n                    }\n\n                    public function finish(int $exitCode): void\n                    {\n                        $xmlDocument = new DOMDocument('1.0');\n                        $xmlDocument->load($this->xmlFile);\n                        $rootNode = $xmlDocument->firstChild;\n\n                        if (!$rootNode instanceof DOMNode) {\n                            $this->report->close(\n                                $exitCode === 0 ? ReportInterface::STATUS_PASSED : ReportInterface::STATUS_FAILED\n                            );\n                            return;\n                        }\n\n                        foreach ($rootNode->childNodes as $childNode) {\n                            if (!$childNode instanceof DOMElement || $childNode->nodeName !== 'file') {\n                                continue;\n                            }\n\n                            $fileName = $childNode->getAttribute('name');\n                            if (strpos($fileName, $this->rootDir) === 0) {\n                                $fileName = substr($fileName, strlen($this->rootDir) + 1);\n                            }\n\n                            foreach ($childNode->childNodes as $violationNode) {\n                                if (!$violationNode instanceof DOMElement) {\n                                    continue;\n                                }\n\n                                \/*\n                                 * <violation> may have:\n                                 * beginline: starting line of the issue.\n                                 * endline:   ending line of the issue.\n                                 * rule:      name of the rule.\n                                 * ruleset:   name of the ruleset the rule is defined within.\n                                 * package:   namespace of the class where the issue is within.\n                                 * class:     name of the class where the issue is within.\n                                 * method:    name of the method where the issue is within.\n                                 * externalInfoUrl: external URL describing the violation.\n                                 * priority: The priority for the rule.\n                                 *           This can be a value in the range 1-5, where 1 is the highest priority and\n                                 *           5 the lowest priority.\n                                 *\/\n\n                                $message = sprintf(\n                                    '%s%s(Ruleset: %s, %s)',\n                                    trim($violationNode->textContent),\n                                    \"\\n\",\n                                    (string) $this->getXmlAttribute($violationNode, 'ruleset', ''),\n                                    (string) $this->getXmlAttribute($violationNode, 'externalInfoUrl', '')\n                                );\n\n                                $severity = ToolReportInterface::SEVERITY_ERROR;\n                                if (null !== $prio = $this->getIntXmlAttribute($violationNode, 'priority')) {\n                                    \/\/ FIXME: Is this mapping correct?\n                                    switch ($prio) {\n                                        case 1:\n                                        case 2:\n                                        case 3:\n                                            $severity = ToolReportInterface::SEVERITY_ERROR;\n                                            break;\n                                        case 4:\n                                            $severity = ToolReportInterface::SEVERITY_WARNING;\n                                            break;\n                                        case 5:\n                                        default:\n                                            $severity = ToolReportInterface::SEVERITY_INFO;\n                                    }\n                                }\n\n                                $beginLine = $this->getIntXmlAttribute($violationNode, 'beginline');\n                                $endLine   = $this->getIntXmlAttribute($violationNode, 'endline');\n                                $this->report->addDiagnostic($severity, $message)\n                                    ->forFile($fileName)\n                                        ->forRange(\n                                            (int) $this->getIntXmlAttribute($violationNode, 'beginline'),\n                                            null,\n                                            $endLine !== $beginLine ? $endLine : null,\n                                        )\n                                        ->end()\n                                    ->fromSource((string) $this->getXmlAttribute($violationNode, 'rule'))\n                                    ->end();\n                            }\n                        }\n\n                        $this->report->addAttachment('pmd.xml')\n                                ->fromFile($this->xmlFile)\n                                ->setMimeType('application\/xml')\n                            ->end();\n\n                        $this->report->close(\n                            $exitCode === 0\n                                ? ReportInterface::STATUS_PASSED\n                                : ReportInterface::STATUS_FAILED\n                        );\n                    }\n\n                    \/**\n                     * @param mixed $defaultValue\n                     *\/\n                    private function getXmlAttribute(\n                        DOMElement $element,\n                        string $attribute,\n                        ?string $defaultValue = null\n                    ): ?string {\n                        if ($element->hasAttribute($attribute)) {\n                            return $element->getAttribute($attribute);\n                        }\n\n                        return $defaultValue;\n                    }\n\n                    private function getIntXmlAttribute(DOMElement $element, string $attribute): ?int\n                    {\n                        $value = $this->getXmlAttribute($element, $attribute);\n                        if ($value === null) {\n                            return null;\n                        }\n\n                        return (int) $value;\n                    }\n                };\n            }\n        };\n    }\n};\n"},"bootstrap-4":{"plugin-version":"1.0.0","type":"inline","code":"<?php\n\n\/**\n * Tool home: https:\/\/github.com\/sebastianbergmann\/phpcpd\n *\/\n\nuse Phpcq\\PluginApi\\Version10\\BuildConfigInterface;\nuse Phpcq\\PluginApi\\Version10\\ConfigurationOptionsBuilderInterface;\nuse Phpcq\\PluginApi\\Version10\\ConfigurationPluginInterface;\n\nreturn new class implements ConfigurationPluginInterface {\n    public function getName(): string\n    {\n        return 'phpcpd';\n    }\n\n    public function describeOptions(ConfigurationOptionsBuilderInterface $configOptionsBuilder): void\n    {\n        $configOptionsBuilder->describeArrayOption(\n            'names',\n            'A list of file names to check.',\n            ['*.php']\n        );\n\n        $configOptionsBuilder->describeArrayOption(\n            'names_exclude',\n            'A list of file names to exclude.'\n        );\n\n        $configOptionsBuilder->describeArrayOption(\n            'regexps_exclude',\n            'A list of paths regexps to exclude (example: \"#var\/.*_tmp#\")'\n        );\n\n        $configOptionsBuilder->describeStringOption(\n            'log',\n            'Write result in PMD-CPD XML format to file'\n        );\n\n        $configOptionsBuilder->describeIntOption(\n            'min_lines',\n            'Minimum number of identical lines.',\n            5\n        );\n\n        $configOptionsBuilder->describeIntOption(\n            'min_tokens',\n            'Minimum number of identical tokens.',\n            70\n        );\n\n        $configOptionsBuilder->describeBoolOption(\n            'fuzzy',\n            'Fuzz variable names',\n            false\n        );\n\n        $configOptionsBuilder->describeArrayOption(\n            'custom_flags',\n            'Any custom flags to pass to phpcpd. For valid flags refer to the phpcpd documentation.'\n        );\n\n        $configOptionsBuilder->describeArrayOption(\n            'directories',\n            'Source directories to be analyzed with phpcpd.'\n        );\n    }\n\n    public function processConfig(array $config, BuildConfigInterface $buildConfig): iterable\n    {\n        [$should, $excluded] = $this->processDirectories($config['directories']);\n        $args = [];\n        if ([] !== $excluded) {\n            foreach ($excluded as $path) {\n                if ('' === ($path = trim($path))) {\n                    continue;\n                }\n                $args[] = '--exclude=' . $path;\n            }\n        }\n        if ('' !== ($values = $this->commaValues($config, 'names'))) {\n            $args[] = '--names=' . $values;\n        }\n        if ('' !== ($values = $this->commaValues($config, 'names_exclude'))) {\n            $args[] = '--names-exclude=' . $values;\n        }\n        if ('' !== ($values = $this->commaValues($config, 'regexps_exclude'))) {\n            $args[] = '--regexps-exclude=' . $values;\n        }\n        if ('' !== ($values = $config['log'] ?? '')) {\n            $args[] = '--log-pmd=' . $values;\n        }\n        if ('' !== ($values = $config['min_lines'] ?? '')) {\n            $args[] = '--min-lines=' . $values;\n        }\n        if ('' !== ($values = $config['min_tokens'] ?? '')) {\n            $args[] = '--min-tokens=' . $values;\n        }\n        if ($config['fuzzy'] ?? false) {\n            $args[] = '--fuzzy';\n        }\n\n        if ([] !== ($values = $config['custom_flags'] ?? [])) {\n            foreach ($values as $value) {\n                $args[] = (string) $value;\n            }\n        }\n\n        yield $buildConfig\n            ->getTaskFactory()\n            ->buildRunPhar('phpcpd', array_merge($args, $should))\n            ->withWorkingDirectory($buildConfig->getProjectConfiguration()->getProjectRootPath())\n            ->build();\n    }\n\n    \/**\n     * Process the directory list.\n     *\n     * @param array $directories The directory list.\n     *\n     * @return array\n     *\/\n    private function processDirectories(array $directories): array\n    {\n        $should  = [];\n        $exclude = [];\n        foreach ($directories as $directory => $dirConfig) {\n            $should[] = $directory;\n            if (null !== $dirConfig) {\n                if (isset($dirConfig['excluded'])) {\n                    foreach ($dirConfig['excluded'] as $excl) {\n                        $exclude[] = $directory . '\/' . $excl;\n                    }\n                }\n            }\n        }\n        return [$should, $exclude];\n    }\n\n    private function commaValues(array $config, string $key): string\n    {\n        if (!isset($config[$key])) {\n            return '';\n        }\n        return implode(',', (array) $config[$key]);\n    }\n};\n"},"bootstrap-5":{"plugin-version":"1.0.0","type":"inline","code":"<?php\n\n\/**\n * Tool home: https:\/\/github.com\/sebastianbergmann\/phploc\n *\/\n\nuse Phpcq\\PluginApi\\Version10\\BuildConfigInterface;\nuse Phpcq\\PluginApi\\Version10\\ConfigurationOptionsBuilderInterface;\nuse Phpcq\\PluginApi\\Version10\\ConfigurationPluginInterface;\n\nreturn new class implements ConfigurationPluginInterface {\n    public function getName(): string\n    {\n        return 'phploc';\n    }\n\n    public function describeOptions(ConfigurationOptionsBuilderInterface $configOptionsBuilder): void\n    {\n        $configOptionsBuilder->describeArrayOption('output', 'List of outputs to use.');\n\n        $configOptionsBuilder->describeArrayOption(\n            'custom_flags',\n            'Any custom flags to pass to phploc. For valid flags refer to the phploc documentation.'\n        );\n\n        $configOptionsBuilder->describeArrayOption('directories', 'Source directories to be analyzed with phploc.');\n    }\n\n    public function processConfig(array $config, BuildConfigInterface $buildConfig): iterable\n    {\n        [$should, $excluded] = $this->processDirectories($config['directories']);\n        $args = [];\n        if ([] !== $excluded) {\n            foreach ($excluded as $path) {\n                if ('' === ($path = trim($path))) {\n                    continue;\n                }\n                $args[] = '--exclude=' . $path;\n            }\n        }\n\n        if ([] !== ($values = $config['custom_flags'] ?? [])) {\n            foreach ($values as $value) {\n                $args[] = (string) $value;\n            }\n        }\n\n        yield $buildConfig\n            ->getTaskFactory()\n            ->buildRunPhar('phploc', array_merge($args, $should))\n            ->withWorkingDirectory($buildConfig->getProjectConfiguration()->getProjectRootPath())\n            ->build();\n    }\n\n    \/**\n     * Process the directory list.\n     *\n     * @param array $directories The directory list.\n     *\n     * @return array\n     *\/\n    private function processDirectories(array $directories): array\n    {\n        $should  = [];\n        $exclude = [];\n        foreach ($directories as $directory => $dirConfig) {\n            $should[] = $directory;\n            if (null !== $dirConfig) {\n                if (isset($dirConfig['excluded'])) {\n                    foreach ($dirConfig['excluded'] as $excl) {\n                        $exclude[] = $directory . '\/' . $excl;\n                    }\n                }\n            }\n        }\n        return [$should, $exclude];\n    }\n\n    private function commaValues(array $config, string $key): string\n    {\n        if (!isset($config[$key])) {\n            return '';\n        }\n        return implode(',', (array) $config[$key]);\n    }\n};\n"},"bootstrap-6":{"plugin-version":"1.0.0","type":"inline","code":"<?php\n\nuse Phpcq\\PluginApi\\Version10\\BuildConfigInterface;\nuse Phpcq\\PluginApi\\Version10\\ConfigurationOptionsBuilderInterface;\nuse Phpcq\\PluginApi\\Version10\\ConfigurationPluginInterface;\nuse Phpcq\\PluginApi\\Version10\\Util\\CheckstyleReportAppender;\n\nreturn new class implements ConfigurationPluginInterface {\n    public function getName(): string\n    {\n        return 'phpcs';\n    }\n\n    public function describeOptions(ConfigurationOptionsBuilderInterface $configOptionsBuilder): void\n    {\n        $configOptionsBuilder\n            ->describeArrayOption('directories', 'The source directories to be analyzed with phpcs.')\n            ->describeStringOption('standard', 'The default coding standard style')\n            ->describeArrayOption('excluded', 'The excluded files and folders.', [])\n        ;\n\n        $configOptionsBuilder->describeArrayOption(\n            'custom_flags',\n            'Any custom flags to pass to phpcs. For valid flags refer to the cphpcs documentation.',\n        );\n    }\n\n    public function processConfig(array $config, BuildConfigInterface $buildConfig): iterable\n    {\n        $projectRoot = $buildConfig->getProjectConfiguration()->getProjectRootPath();\n        foreach ($config['directories'] as $directory => $directoryConfig) {\n            $tmpfile = $buildConfig->getUniqueTempFile($this, 'checkstyle.xml');\n\n            yield $buildConfig\n                ->getTaskFactory()\n                ->buildRunPhar('phpcs', $this->buildArguments($directory, $directoryConfig ?: $config, $tmpfile))\n                ->withWorkingDirectory($projectRoot)\n                ->withOutputTransformer(CheckstyleReportAppender::transformFile($tmpfile, $projectRoot))\n                ->build();\n        }\n    }\n\n    private function buildArguments(\n        string $directory,\n        array $config,\n        string $tempFile\n    ): array {\n        $arguments = [];\n\n        if (isset($config['standard'])) {\n            $arguments[] = '--standard=' . $config['standard'];\n        }\n\n        if (isset($config['excluded'])) {\n            $arguments[] = '--exclude=' . implode(',', $config['excluded']);\n        }\n\n        if ([] !== ($values = $config['custom_flags'] ?? [])) {\n            foreach ($values as $value) {\n                $arguments[] = (string) $value;\n            }\n        }\n\n        $arguments[] = '--report=checkstyle';\n        $arguments[] = '--report-file=' . $tempFile;\n\n        $arguments[] = $directory;\n\n        return $arguments;\n    }\n};\n"},"bootstrap-7":{"plugin-version":"1.0.0","type":"inline","code":"<?php\n\nuse Phpcq\\PluginApi\\Version10\\BuildConfigInterface;\nuse Phpcq\\PluginApi\\Version10\\ConfigurationOptionsBuilderInterface;\nuse Phpcq\\PluginApi\\Version10\\ConfigurationPluginInterface;\n\nreturn new class implements ConfigurationPluginInterface {\n    public function getName(): string\n    {\n        return 'phpcbf';\n    }\n\n    public function describeOptions(ConfigurationOptionsBuilderInterface $configOptionsBuilder): void\n    {\n        $configOptionsBuilder\n            ->describeArrayOption('directories', 'The source directories to be fixed with phpcbf.')\n            ->describeStringOption('standard', 'The default code style', 'PSR12')\n            ->describeArrayOption('excluded', 'The excluded files and folders.', [])\n        ;\n\n        $configOptionsBuilder->describeArrayOption(\n            'custom_flags',\n            'Any custom flags to pass to phpcbf. For valid flags refer to the cphpcs documentation.',\n        );\n    }\n\n    public function processConfig(array $config, BuildConfigInterface $buildConfig): iterable\n    {\n        foreach ($config['directories'] as $directory => $directoryConfig) {\n            yield $buildConfig\n                ->getTaskFactory()\n                ->buildRunPhar('phpcbf', $this->buildArguments($directory, $directoryConfig ?: $config, $buildConfig))\n                ->withWorkingDirectory($buildConfig->getProjectConfiguration()->getProjectRootPath())\n                ->build();\n        }\n    }\n\n    private function buildArguments(string $directory, array $config, BuildConfigInterface $buildConfig): array\n    {\n        $arguments = [];\n\n        if (isset($config['standard'])) {\n            $arguments[] = '--standard=' . $config['standard'];\n        }\n\n        if (isset($config['excluded'])) {\n            $arguments[] = '--exclude=' . implode(',', $config['excluded']);\n        }\n\n        if ([] !== ($values = $config['custom_flags'] ?? [])) {\n            foreach ($values as $value) {\n                $arguments[] = (string) $value;\n            }\n        }\n\n        $arguments[] = $directory;\n\n        return $arguments;\n    }\n};\n"},"bootstrap-8":{"plugin-version":"1.0.0","type":"inline","code":"<?php\n\nuse Phpcq\\PluginApi\\Version10\\BuildConfigInterface;\nuse Phpcq\\PluginApi\\Version10\\ConfigurationOptionsBuilderInterface;\nuse Phpcq\\PluginApi\\Version10\\ConfigurationPluginInterface;\nuse Phpcq\\PluginApi\\Version10\\OutputInterface;\nuse Phpcq\\PluginApi\\Version10\\OutputTransformerFactoryInterface;\nuse Phpcq\\PluginApi\\Version10\\OutputTransformerInterface;\nuse Phpcq\\PluginApi\\Version10\\ReportInterface;\nuse Phpcq\\PluginApi\\Version10\\ToolReportInterface;\nuse Phpcq\\PluginApi\\Version10\\Util\\BufferedLineReader;\n\nreturn new class implements ConfigurationPluginInterface {\n    public function getName(): string\n    {\n        return 'composer-normalize';\n    }\n\n    public function describeOptions(ConfigurationOptionsBuilderInterface $configOptionsBuilder): void\n    {\n        $configOptionsBuilder\n            ->describeBoolOption('dry_run', 'Show the results of normalizing, but do not modify any files', true)\n            ->describeStringOption('file', 'Path to composer.json file relative to project root')\n            ->describeIntOption(\n                'indent_size',\n                'Indent size (an integer greater than 0); should be used with the indent_style option',\n                2\n            )\n            ->describeStringOption(\n                'indent_style',\n                'Indent style (one of \"space\", \"tab\"); should be used with the indent_size option',\n                'space'\n            )\n            ->describeBoolOption('no_update_lock', 'Do not update lock file if it exists');\n    }\n\n    public function processConfig(array $config, BuildConfigInterface $buildConfig): iterable\n    {\n        $composerJson = $config['file'] ?? 'composer.json';\n        assert(is_string($composerJson));\n\n        yield $buildConfig\n            ->getTaskFactory()\n            ->buildRunPhar('composer-normalize', $this->buildArguments($config))\n            ->withWorkingDirectory($buildConfig->getProjectConfiguration()->getProjectRootPath())\n            ->withOutputTransformer($this->createOutputTransformerFactory($composerJson))\n            ->build();\n    }\n\n    \/** @psalm-return list<string> *\/\n    private function buildArguments(array $config): array\n    {\n        $arguments = [];\n\n        if (isset($config['file'])) {\n            $arguments[] = (string) $config['file'];\n        }\n\n        if (!isset($config['dry_run']) || $config['dry_run']) {\n            $arguments[] = '--dry-run';\n        }\n\n        if (isset($config['indent_size'])) {\n            $arguments[] = '--indent-size';\n            $arguments[] = (string) $config['indent_size'];\n        }\n\n        if (isset($config['indent_style'])) {\n            $arguments[] = '--indent-style';\n            $arguments[] = (string) $config['indent_style'];\n        }\n\n        if (isset($config['no_update_lock'])) {\n            $arguments[] = '--no-update-lock';\n        }\n\n        return $arguments;\n    }\n\n    private function createOutputTransformerFactory(string $composerFile): OutputTransformerFactoryInterface\n    {\n        return new class ($composerFile) implements OutputTransformerFactoryInterface {\n            \/** @var string *\/\n            private $composerFile;\n\n            public function __construct(string $composerFile)\n            {\n                $this->composerFile = $composerFile;\n            }\n\n            public function createFor(ToolReportInterface $report): OutputTransformerInterface\n            {\n                return new class ($this->composerFile, $report) implements OutputTransformerInterface {\n                    private const REGEX_IN_APPLICATION = '#^In Application\\.php line [0-9]*:$#';\n                    private const REGEX_NOT_WRITABLE = '#^.* is not writable\\.$#';\n                    private const REGEX_NOT_NORMALIZED = '#^.* is not normalized\\.$#';\n                    private const REGEX_IS_NORMALIZED = '#^.* is already normalized\\.$#';\n                    private const REGEX_XDEBUG_ENABLED = '#^(?<message>You are running composer with Xdebug enabled\\.' .\n                    ' This has a major impact on runtime performance\\. See https:\/\/getcomposer.org\/xdebug)$#';\n                    private const REGEX_LOCK_OUTDATED = '#^(?<message>The lock file is not up to date with the latest' .\n                    ' changes in composer\\.json, it is recommended that you run `composer update --lock`\\.)$#';\n                    private const REGEX_SCHEMA_VIOLATION = '#^.* does not match the expected JSON schema:$#';\n                    private const REGEX_SKIPPED_COMMAND = '#^(?<message>Plugin command normalize \\(Localheinz\\\\\\\\' .\n                    'Composer\\\\\\\\Normalize\\\\\\\\Command\\\\\\\\NormalizeCommand\\) would override a Composer command and has' .\n                    ' been skipped)#';\n\n                    \/** @var string *\/\n                    private $composerFile;\n                    \/** @var BufferedLineReader *\/\n                    private $data;\n                    \/** @var string *\/\n                    private $diff = '';\n                    \/** @var ToolReportInterface *\/\n                    private $report;\n\n                    public function __construct(string $composerFile, ToolReportInterface $report)\n                    {\n                        $this->composerFile = $composerFile;\n                        $this->report       = $report;\n                        $this->data         = BufferedLineReader::create();\n                    }\n\n                    public function write(string $data, int $channel): void\n                    {\n                        if (OutputInterface::CHANNEL_STDOUT === $channel) {\n                            \/\/ This is the ONLY line that is on output channel instead of error.\n                            if (1 === preg_match(self::REGEX_IS_NORMALIZED, $dummy = trim($data))) {\n                                $this->logDiagnostic(\n                                    $this->composerFile . ' is normalized.',\n                                    ToolReportInterface::SEVERITY_INFO\n                                );\n                                return;\n                            }\n                            $this->diff .= $data;\n                            return;\n                        }\n\n                        $this->data->push($data);\n                    }\n\n                    public function finish(int $exitCode): void\n                    {\n                        $this->process();\n                        $this->report->close(0 === $exitCode\n                            ? ReportInterface::STATUS_PASSED\n                            : ReportInterface::STATUS_FAILED);\n                    }\n\n                    private function logDiagnostic(string $message, string $severity): void\n                    {\n                        $this->report->addDiagnostic($severity, $message)->forFile($this->composerFile)->end()->end();\n                    }\n\n                    private function process(): void\n                    {\n                        $unknown = [];\n                        while (null !== $line = $this->data->fetch()) {\n                            if (!$this->processLine($line)) {\n                                $unknown[] = $line;\n                            }\n                        }\n\n                        if ([] !== $unknown) {\n                            $this->logDiagnostic(\n                                'Did not understand the following tool output: ' . \"\\n\" .\n                                implode(\"\\n\", $unknown),\n                                'warning'\n                            );\n                            $this->report\n                                ->addAttachment('composer-normalize-raw.txt')\n                                ->fromString($this->data->getData())\n                                ->end();\n                        }\n\n                        if ('' !== $this->diff) {\n                            $this->report\n                                ->addDiff('composer.json-normalized.diff')\n                                    ->fromString($this->diff)\n                                ->end();\n                        }\n                    }\n\n                    private function processLine(string $line): bool\n                    {\n                        \/\/ Never process empty lines.\n                        if (empty($line)) {\n                            return true;\n                        }\n\n                        foreach (\n                            \/\/ Regex => callback (...<named match>): void\n                            [\n                                self::REGEX_IN_APPLICATION => function (): void {\n                                    \/\/ Ignore header.\n                                },\n                                self::REGEX_NOT_WRITABLE => function (): void {\n                                    $this->logDiagnostic(\n                                        $this->composerFile . ' is not writable.',\n                                        ToolReportInterface::SEVERITY_ERROR\n                                    );\n                                },\n                                self::REGEX_NOT_NORMALIZED => function (): void {\n                                    $this->logDiagnostic(\n                                        $this->composerFile . ' is not normalized.',\n                                        ToolReportInterface::SEVERITY_ERROR\n                                    );\n                                },\n                                self::REGEX_XDEBUG_ENABLED => function (string $message): void {\n                                    $this->logDiagnostic($message, ToolReportInterface::SEVERITY_INFO);\n                                },\n                                self::REGEX_LOCK_OUTDATED => function (string $message): void {\n                                    $this->logDiagnostic($message, ToolReportInterface::SEVERITY_ERROR);\n                                },\n                                self::REGEX_SCHEMA_VIOLATION => function (): void {\n                                    while (null !== $line = $this->data->peek()) {\n                                        if (empty($line)) {\n                                            $this->data->fetch();\n                                            continue;\n                                        }\n                                        if ('-' === $line[0]) {\n                                            $error = substr($line, 2);\n                                            $this->data->fetch();\n                                            \/\/ Collect wrapped lines.\n                                            while (null !== $line = $this->data->peek()) {\n                                                if (empty($line)) {\n                                                    break;\n                                                }\n                                                if ('-' !== $line[0]) {\n                                                    $error .= ' ' . $line;\n                                                    $this->data->fetch();\n                                                    continue;\n                                                }\n                                                break;\n                                            }\n                                            $this->logDiagnostic($error, ToolReportInterface::SEVERITY_ERROR);\n                                        }\n                                        if (\n                                            'See https:\/\/getcomposer.org\/doc\/04-schema.md for details on the schema'\n                                            === $line\n                                        ) {\n                                            $this->data->fetch();\n                                            break;\n                                        }\n                                    }\n                                },\n                                self::REGEX_SKIPPED_COMMAND => function (string $message): void {\n                                    $this->logDiagnostic($message, ToolReportInterface::SEVERITY_NOTICE);\n                                },\n                            ] as $pattern => $handler\n                        ) {\n                            if (1 === preg_match($pattern, $line, $matches)) {\n                                $variables = array_filter($matches, 'is_string', ARRAY_FILTER_USE_KEY);\n                                call_user_func_array($handler, $variables);\n                                return true;\n                            }\n                        }\n                        return false;\n                    }\n                };\n            }\n        };\n    }\n};\n"}},"phars":{"phpunit":[{"version":"9.2.2","phar-url":"https:\/\/phar.phpunit.de\/phpunit-9.2.2.phar","bootstrap":"bootstrap-0","requirements":{"php":"^7.3","ext-dom":"*","ext-json":"*","ext-libxml":"*","ext-mbstring":"*","ext-xml":"*","ext-xmlwriter":"*"},"hash":{"type":"sha-256","value":"8a67d35ec6585c29d5baa5685b37c35a1e0ab28ebcd51bc4241026f2bd501dea"},"signature":"https:\/\/phar.phpunit.de\/phpunit-9.2.2.phar.asc"}],"psalm":[{"version":"3.11.5","phar-url":"https:\/\/github.com\/vimeo\/psalm\/releases\/download\/3.11.5\/psalm.phar","bootstrap":"bootstrap-1","requirements":{"php":"^7.1.3|^8","ext-SimpleXML":"*","ext-dom":"*","ext-json":"*","ext-libxml":"*","ext-tokenizer":"*"},"hash":null,"signature":"https:\/\/github.com\/vimeo\/psalm\/releases\/download\/3.11.5\/psalm.phar.asc"}],"composer-require-checker":[{"version":"2.1.0","phar-url":"https:\/\/github.com\/maglnet\/ComposerRequireChecker\/releases\/download\/2.1.0\/composer-require-checker.phar","bootstrap":"bootstrap-2","requirements":{"php":"^7.2","ext-json":"*","ext-phar":"*"},"hash":null,"signature":"https:\/\/github.com\/maglnet\/ComposerRequireChecker\/releases\/download\/2.1.0\/composer-require-checker.phar.asc"}],"phpmd":[{"version":"2.8.2","phar-url":"https:\/\/github.com\/phpmd\/phpmd\/releases\/download\/2.8.2\/phpmd.phar","bootstrap":"bootstrap-3","requirements":{"php":">=5.3.9","ext-xml":"*"},"hash":null,"signature":null}],"phpcpd":[{"version":"5.0.2","phar-url":"https:\/\/phar.phpunit.de\/phpcpd-5.0.2.phar","bootstrap":"bootstrap-4","requirements":{"php":"^7.3","ext-dom":"*"},"hash":{"type":"sha-256","value":"12e94af9928be2f33fd394d2cc5d96b3925de24d614381d06b3096cc9eeabbcb"},"signature":"https:\/\/phar.phpunit.de\/phpcpd-5.0.2.phar.asc"}],"phploc":[{"version":"6.0.2","phar-url":"https:\/\/phar.phpunit.de\/phploc-6.0.2.phar","bootstrap":"bootstrap-5","requirements":{"php":"^7.3","ext-dom":"*","ext-json":"*"},"hash":{"type":"sha-256","value":"1ccb826b0a55b9d77b17656ad72f9c90877737a4a4be3f1517dda73524bfb16e"},"signature":"https:\/\/phar.phpunit.de\/phploc-6.0.2.phar.asc"}],"phpcs":[{"version":"3.5.5","phar-url":"https:\/\/github.com\/squizlabs\/PHP_CodeSniffer\/releases\/download\/3.5.5\/phpcs.phar","bootstrap":"bootstrap-6","requirements":{"php":">=5.4.0","ext-tokenizer":"*","ext-xmlwriter":"*","ext-simplexml":"*"},"hash":null,"signature":"https:\/\/github.com\/squizlabs\/PHP_CodeSniffer\/releases\/download\/3.5.5\/phpcs.phar.asc"}],"phpcbf":[{"version":"3.5.5","phar-url":"https:\/\/github.com\/squizlabs\/PHP_CodeSniffer\/releases\/download\/3.5.5\/phpcbf.phar","bootstrap":"bootstrap-7","requirements":{"php":">=5.4.0","ext-tokenizer":"*","ext-xmlwriter":"*","ext-simplexml":"*"},"hash":null,"signature":"https:\/\/github.com\/squizlabs\/PHP_CodeSniffer\/releases\/download\/3.5.5\/phpcbf.phar.asc"}],"composer-normalize":[{"version":"2.5.1","phar-url":"https:\/\/github.com\/ergebnis\/composer-normalize\/releases\/download\/2.5.1\/composer-normalize.phar","bootstrap":"bootstrap-8","requirements":{"php":"^7.1"},"hash":null,"signature":"https:\/\/github.com\/ergebnis\/composer-normalize\/releases\/download\/2.5.1\/composer-normalize.phar.asc"}]}}